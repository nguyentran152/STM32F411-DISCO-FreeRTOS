
Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000640c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067fc  080067fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006804  08006804  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800680c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ef0  20000078  08006884  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f68  08006884  00022f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010381  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002925  00000000  00000000  00030429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00032d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00033d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001889c  00000000  00000000  00034c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171a  00000000  00000000  0004d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fe5  00000000  00000000  0005ebde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000f6c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006594 	.word	0x08006594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006594 	.word	0x08006594

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <prvReaddTaskToReadyList>:
static void vManagerTask( void *pvParameters );
static void vEmployeeTask( void *pvParameters );


void prvReaddTaskToReadyList(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fd3b 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f921 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f9b5 	bl	8000920 <MX_GPIO_Init>
  MX_USART2_Init();
 80005b6:	f000 f987 	bl	80008c8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	//enable CYCCNT register
	DWT_CTRL |= (1 << 0);
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <main+0xb8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a27      	ldr	r2, [pc, #156]	; (800065c <main+0xb8>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]


	sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 80005c6:	4926      	ldr	r1, [pc, #152]	; (8000660 <main+0xbc>)
 80005c8:	4826      	ldr	r0, [pc, #152]	; (8000664 <main+0xc0>)
 80005ca:	f004 fe1b 	bl	8005204 <siprintf>
	printmsg(usr_msg);
 80005ce:	4825      	ldr	r0, [pc, #148]	; (8000664 <main+0xc0>)
 80005d0:	f000 f8e6 	bl	80007a0 <printmsg>

	/* Create binary semaphore*/
    vSemaphoreCreateBinary( xWork );
 80005d4:	2203      	movs	r2, #3
 80005d6:	2100      	movs	r1, #0
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fc0f 	bl	8002dfc <xQueueGenericCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <main+0xc4>)
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <main+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d006      	beq.n	80005fa <main+0x56>
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <main+0xc4>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	f002 fc73 	bl	8002ee0 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 80005fa:	2200      	movs	r2, #0
 80005fc:	2104      	movs	r1, #4
 80005fe:	2001      	movs	r0, #1
 8000600:	f002 fbfc 	bl	8002dfc <xQueueGenericCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <main+0xc8>)
 8000608:	6013      	str	r3, [r2, #0]

    /* Check the semaphore and queue was created successfully. */
    if( (xWork != NULL) && (xWorkQueue != NULL) )
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <main+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d01b      	beq.n	800064a <main+0xa6>
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <main+0xc8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d017      	beq.n	800064a <main+0xa6>
    {

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
        xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 800061a:	2300      	movs	r3, #0
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2303      	movs	r3, #3
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000628:	4911      	ldr	r1, [pc, #68]	; (8000670 <main+0xcc>)
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0xd0>)
 800062c:	f003 f822 	bl	8003674 <xTaskCreate>

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 8000630:	2300      	movs	r3, #0
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2301      	movs	r3, #1
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800063e:	490e      	ldr	r1, [pc, #56]	; (8000678 <main+0xd4>)
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <main+0xd8>)
 8000642:	f003 f817 	bl	8003674 <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 8000646:	f003 f9c5 	bl	80039d4 <vTaskStartScheduler>
    }

    sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 800064a:	490d      	ldr	r1, [pc, #52]	; (8000680 <main+0xdc>)
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <main+0xc0>)
 800064e:	f004 fdd9 	bl	8005204 <siprintf>
    printmsg(usr_msg);
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <main+0xc0>)
 8000654:	f000 f8a4 	bl	80007a0 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0xb4>
 800065a:	bf00      	nop
 800065c:	e0001000 	.word	0xe0001000
 8000660:	080065ac 	.word	0x080065ac
 8000664:	200000d8 	.word	0x200000d8
 8000668:	200001d4 	.word	0x200001d4
 800066c:	200001d8 	.word	0x200001d8
 8000670:	080065e0 	.word	0x080065e0
 8000674:	08000685 	.word	0x08000685
 8000678:	080065e8 	.word	0x080065e8
 800067c:	08000739 	.word	0x08000739
 8000680:	080065f4 	.word	0x080065f4

08000684 <vManagerTask>:




static void vManagerTask( void *pvParameters )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	unsigned int xWorkTicketId;
	portBASE_TYPE xStatus;

	xSemaphoreGive( xWork);
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <vManagerTask+0x6c>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	f002 fc23 	bl	8002ee0 <xQueueGenericSend>

	while(1)
	{
		/* get a work ticket id random number */
		xWorkTicketId = ( rand() & 0x1FF );
 800069a:	f004 fd75 	bl	8005188 <rand>
 800069e:	4603      	mov	r3, r0
 80006a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006a4:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY );
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <vManagerTask+0x70>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	f107 0108 	add.w	r1, r7, #8
 80006ae:	2300      	movs	r3, #0
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	f002 fc14 	bl	8002ee0 <xQueueGenericSend>
 80006b8:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d007      	beq.n	80006d0 <vManagerTask+0x4c>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 80006c0:	490d      	ldr	r1, [pc, #52]	; (80006f8 <vManagerTask+0x74>)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <vManagerTask+0x78>)
 80006c4:	f004 fd9e 	bl	8005204 <siprintf>
			printmsg(usr_msg);
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <vManagerTask+0x78>)
 80006ca:	f000 f869 	bl	80007a0 <printmsg>
 80006ce:	e7e4      	b.n	800069a <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <vManagerTask+0x6c>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	f002 fc01 	bl	8002ee0 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <vManagerTask+0x7c>)
 80006e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	f3bf 8f6f 	isb	sy
		xWorkTicketId = ( rand() & 0x1FF );
 80006ee:	e7d4      	b.n	800069a <vManagerTask+0x16>
 80006f0:	200001d4 	.word	0x200001d4
 80006f4:	200001d8 	.word	0x200001d8
 80006f8:	08006614 	.word	0x08006614
 80006fc:	200000d8 	.word	0x200000d8
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <EmployeeDoWork>:
	}
}


void EmployeeDoWork(unsigned char TicketId)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	461a      	mov	r2, r3
 8000712:	4907      	ldr	r1, [pc, #28]	; (8000730 <EmployeeDoWork+0x2c>)
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <EmployeeDoWork+0x30>)
 8000716:	f004 fd75 	bl	8005204 <siprintf>
	printmsg(usr_msg);
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <EmployeeDoWork+0x30>)
 800071c:	f000 f840 	bl	80007a0 <printmsg>
	vTaskDelay(TicketId);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f922 	bl	800396c <vTaskDelay>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08006634 	.word	0x08006634
 8000734:	200000d8 	.word	0x200000d8

08000738 <vEmployeeTask>:



static void vEmployeeTask( void *pvParameters )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	unsigned char xWorkTicketId;
	portBASE_TYPE xStatus;

	while(xSemaphoreTake( xWork, 0 ))
 8000740:	e017      	b.n	8000772 <vEmployeeTask+0x3a>
	{
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
//		xSemaphoreTake( xWork, 0 );

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <vEmployeeTask+0x58>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f107 010b 	add.w	r1, r7, #11
 800074a:	2200      	movs	r2, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fcad 	bl	80030ac <xQueueReceive>
 8000752:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d104      	bne.n	8000764 <vEmployeeTask+0x2c>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ffd1 	bl	8000704 <EmployeeDoWork>
 8000762:	e006      	b.n	8000772 <vEmployeeTask+0x3a>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000764:	490b      	ldr	r1, [pc, #44]	; (8000794 <vEmployeeTask+0x5c>)
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <vEmployeeTask+0x60>)
 8000768:	f004 fd4c 	bl	8005204 <siprintf>
		    printmsg(usr_msg);
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <vEmployeeTask+0x60>)
 800076e:	f000 f817 	bl	80007a0 <printmsg>
	while(xSemaphoreTake( xWork, 0 ))
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <vEmployeeTask+0x64>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fd5f 	bl	800323c <xQueueSemaphoreTake>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1de      	bne.n	8000742 <vEmployeeTask+0xa>
		}
	}
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001d8 	.word	0x200001d8
 8000794:	08006660 	.word	0x08006660
 8000798:	200000d8 	.word	0x200000d8
 800079c:	200001d4 	.word	0x200001d4

080007a0 <printmsg>:


void printmsg(char *msg)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < strlen(msg); i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	e013      	b.n	80007d6 <printmsg+0x36>
	{
		HAL_USART_Transmit(&husart2, (uint8_t*)&msg[i], strlen(&msg[i]), HAL_MAX_DELAY);
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	18d4      	adds	r4, r2, r3
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd10 	bl	80001e0 <strlen>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	4621      	mov	r1, r4
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <printmsg+0x50>)
 80007cc:	f001 fe77 	bl	80024be <HAL_USART_Transmit>
	for(uint32_t i=0; i < strlen(msg); i++)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fd02 	bl	80001e0 <strlen>
 80007dc:	4602      	mov	r2, r0
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d3e4      	bcc.n	80007ae <printmsg+0xe>
	}

}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000094 	.word	0x20000094

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fcb8 	bl	8005178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <SystemClock_Config+0xcc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <SystemClock_Config+0xd0>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000868:	23c0      	movs	r3, #192	; 0xc0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086c:	2304      	movs	r3, #4
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fe95 	bl	80015a8 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 f9bc 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2103      	movs	r1, #3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f8f6 	bl	8001a98 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b2:	f000 f9a5 	bl	8000c00 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_USART2_Init+0x50>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_USART2_Init+0x54>)
 80008d0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_Init+0x50>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_USART2_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_USART2_Init+0x50>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_USART2_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USART2_Init+0x50>)
 8000906:	f001 fd99 	bl	800243c <HAL_USART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000910:	f000 f976 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000094 	.word	0x20000094
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	4ba2      	ldr	r3, [pc, #648]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4aa1      	ldr	r2, [pc, #644]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b9f      	ldr	r3, [pc, #636]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	4b9b      	ldr	r3, [pc, #620]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a9a      	ldr	r2, [pc, #616]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b98      	ldr	r3, [pc, #608]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b94      	ldr	r3, [pc, #592]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a93      	ldr	r2, [pc, #588]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b91      	ldr	r3, [pc, #580]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b8d      	ldr	r3, [pc, #564]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a8c      	ldr	r2, [pc, #560]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b8a      	ldr	r3, [pc, #552]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b86      	ldr	r3, [pc, #536]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a85      	ldr	r2, [pc, #532]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b83      	ldr	r3, [pc, #524]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b7f      	ldr	r3, [pc, #508]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a7e      	ldr	r2, [pc, #504]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b7c      	ldr	r3, [pc, #496]	; (8000bc4 <MX_GPIO_Init+0x2a4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	4879      	ldr	r0, [pc, #484]	; (8000bc8 <MX_GPIO_Init+0x2a8>)
 80009e4:	f000 fdc6 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	4877      	ldr	r0, [pc, #476]	; (8000bcc <MX_GPIO_Init+0x2ac>)
 80009ee:	f000 fdc1 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f2:	2200      	movs	r2, #0
 80009f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009f8:	4875      	ldr	r0, [pc, #468]	; (8000bd0 <MX_GPIO_Init+0x2b0>)
 80009fa:	f000 fdbb 	bl	8001574 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009fe:	2304      	movs	r3, #4
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	486d      	ldr	r0, [pc, #436]	; (8000bc8 <MX_GPIO_Init+0x2a8>)
 8000a12:	f000 fc2b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a16:	2308      	movs	r3, #8
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4866      	ldr	r0, [pc, #408]	; (8000bc8 <MX_GPIO_Init+0x2a8>)
 8000a2e:	f000 fc1d 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000a32:	2332      	movs	r3, #50	; 0x32
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a36:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4860      	ldr	r0, [pc, #384]	; (8000bc8 <MX_GPIO_Init+0x2a8>)
 8000a48:	f000 fc10 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	485a      	ldr	r0, [pc, #360]	; (8000bcc <MX_GPIO_Init+0x2ac>)
 8000a64:	f000 fc02 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4852      	ldr	r0, [pc, #328]	; (8000bcc <MX_GPIO_Init+0x2ac>)
 8000a84:	f000 fbf2 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	484d      	ldr	r0, [pc, #308]	; (8000bd4 <MX_GPIO_Init+0x2b4>)
 8000a9e:	f000 fbe5 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4845      	ldr	r0, [pc, #276]	; (8000bd4 <MX_GPIO_Init+0x2b4>)
 8000abe:	f000 fbd5 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ac2:	23e0      	movs	r3, #224	; 0xe0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	483d      	ldr	r0, [pc, #244]	; (8000bd4 <MX_GPIO_Init+0x2b4>)
 8000ade:	f000 fbc5 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ae2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af4:	2305      	movs	r3, #5
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <MX_GPIO_Init+0x2b8>)
 8000b00:	f000 fbb4 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b04:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b08:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <MX_GPIO_Init+0x2b0>)
 8000b1e:	f000 fba5 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b22:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b34:	2306      	movs	r3, #6
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4823      	ldr	r0, [pc, #140]	; (8000bcc <MX_GPIO_Init+0x2ac>)
 8000b40:	f000 fb94 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	481e      	ldr	r0, [pc, #120]	; (8000bd4 <MX_GPIO_Init+0x2b4>)
 8000b5a:	f000 fb87 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b70:	230a      	movs	r3, #10
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <MX_GPIO_Init+0x2b4>)
 8000b7c:	f000 fb76 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b80:	2320      	movs	r3, #32
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <MX_GPIO_Init+0x2b0>)
 8000b94:	f000 fb6a 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b98:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9e:	2312      	movs	r3, #18
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000baa:	2304      	movs	r3, #4
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x2b8>)
 8000bb6:	f000 fb59 	bl	800126c <HAL_GPIO_Init>

}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 fa3b 	bl	8001068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40014400 	.word	0x40014400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c4a:	f003 fefd 	bl	8004a48 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <HAL_USART_MspInit+0xc0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d149      	bne.n	8000d12 <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_USART_MspInit+0xc4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <HAL_USART_MspInit+0xc8>)
 8000cee:	f000 fabd 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <HAL_USART_MspInit+0xcc>)
 8000d0e:	f000 faad 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2019      	movs	r0, #25
 8000d42:	f000 fa69 	bl	8001218 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d46:	2019      	movs	r0, #25
 8000d48:	f000 fa82 	bl	8001250 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_InitTick+0xa4>)
 8000d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_InitTick+0xa4>)
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_InitTick+0xa4>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d68:	f107 0210 	add.w	r2, r7, #16
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f8b0 	bl	8001ed8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d78:	f001 f89a 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_InitTick+0xa8>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_InitTick+0xac>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_InitTick+0xb0>)
 8000d94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_InitTick+0xac>)
 8000d98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_InitTick+0xac>)
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_InitTick+0xac>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_InitTick+0xac>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <HAL_InitTick+0xac>)
 8000db2:	f001 f8c3 	bl	8001f3c <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_InitTick+0xac>)
 8000dbe:	f001 f917 	bl	8001ff0 <HAL_TIM_Base_Start_IT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	200001dc 	.word	0x200001dc
 8000ddc:	40014400 	.word	0x40014400

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e12:	f001 f94f 	bl	80020b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001dc 	.word	0x200001dc

08000e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	return 1;
 8000e24:	2301      	movs	r3, #1
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_kill>:

int _kill(int pid, int sig)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e3a:	f004 f965 	bl	8005108 <__errno>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2216      	movs	r2, #22
 8000e42:	601a      	str	r2, [r3, #0]
	return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_exit>:

void _exit (int status)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffe7 	bl	8000e30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e62:	e7fe      	b.n	8000e62 <_exit+0x12>

08000e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00a      	b.n	8000e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e76:	f3af 8000 	nop.w
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	b2ca      	uxtb	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf0      	blt.n	8000e76 <_read+0x12>
	}

return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e009      	b.n	8000ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf1      	blt.n	8000eb0 <_write+0x12>
	}
	return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return 1;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f004 f8ca 	bl	8005108 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	20000224 	.word	0x20000224
 8000fa8:	20012f68 	.word	0x20012f68

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd7 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f004 f889 	bl	8005114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff facf 	bl	80005a4 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001014:	0800680c 	.word	0x0800680c
  ldr r2, =_sbss
 8001018:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800101c:	20012f68 	.word	0x20012f68

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f8d8 	bl	8001202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	200f      	movs	r0, #15
 8001054:	f7ff fe6a 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fdd8 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000228 	.word	0x20000228

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000228 	.word	0x20000228

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff4c 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122a:	f7ff ff61 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800122e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7ff ffb1 	bl	800119c <NVIC_EncodePriority>
 800123a:	4602      	mov	r2, r0
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff80 	bl	8001148 <__NVIC_SetPriority>
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff54 	bl	800110c <__NVIC_EnableIRQ>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e159      	b.n	800153c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8148 	bne.w	8001536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a2 	beq.w	8001536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a56      	ldr	r2, [pc, #344]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x202>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_GPIO_Init+0x2f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1fe>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_GPIO_Init+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1fa>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_GPIO_Init+0x2fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1f6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a45      	ldr	r2, [pc, #276]	; (800156c <HAL_GPIO_Init+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1f2>
 800145a:	2304      	movs	r3, #4
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800145e:	2307      	movs	r3, #7
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x304>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_GPIO_Init+0x304>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f aea2 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e267      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d00c      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d112      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b82      	ldr	r3, [pc, #520]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d05b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d157      	bne.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e242      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x74>
 800160e:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a75      	ldr	r2, [pc, #468]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b70      	ldr	r3, [pc, #448]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6f      	ldr	r2, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6c      	ldr	r2, [pc, #432]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 8001640:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a68      	ldr	r2, [pc, #416]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a65      	ldr	r2, [pc, #404]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fd16 	bl	8001090 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fd12 	bl	8001090 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e207      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xc0>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fd02 	bl	8001090 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fcfe 	bl	8001090 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1f3      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1c7      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4937      	ldr	r1, [pc, #220]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x244>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fcb7 	bl	8001090 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fcb3 	bl	8001090 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1a8      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4925      	ldr	r1, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x244>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fc96 	bl	8001090 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fc92 	bl	8001090 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e187      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d036      	beq.n	8001800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_RCC_OscConfig+0x248>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fc76 	bl	8001090 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc72 	bl	8001090 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e167      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x200>
 80017c6:	e01b      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_OscConfig+0x248>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fc5f 	bl	8001090 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	e00e      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc5b 	bl	8001090 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d907      	bls.n	80017f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e150      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	42470000 	.word	0x42470000
 80017f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ea      	bne.n	80017d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8097 	beq.w	800193c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b81      	ldr	r3, [pc, #516]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b7d      	ldr	r3, [pc, #500]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a7c      	ldr	r2, [pc, #496]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x474>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b74      	ldr	r3, [pc, #464]	; (8001a1c <HAL_RCC_OscConfig+0x474>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a73      	ldr	r2, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x474>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff fc1b 	bl	8001090 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff fc17 	bl	8001090 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e10c      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x474>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x2ea>
 8001884:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	e01c      	b.n	80018cc <HAL_RCC_OscConfig+0x324>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x30c>
 800189a:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a5e      	ldr	r2, [pc, #376]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	4b5c      	ldr	r3, [pc, #368]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a5b      	ldr	r2, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0x324>
 80018b4:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a57      	ldr	r2, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	4b55      	ldr	r3, [pc, #340]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a54      	ldr	r2, [pc, #336]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d015      	beq.n	8001900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fbdc 	bl	8001090 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff fbd8 	bl	8001090 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0cb      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0ee      	beq.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff fbc6 	bl	8001090 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fbc2 	bl	8001090 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0b5      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ee      	bne.n	8001908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	4a38      	ldr	r2, [pc, #224]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80a1 	beq.w	8001a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d05c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d141      	bne.n	80019de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fb96 	bl	8001090 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fb92 	bl	8001090 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e087      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	491b      	ldr	r1, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fb6b 	bl	8001090 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff fb67 	bl	8001090 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e05c      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x416>
 80019dc:	e054      	b.n	8001a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fb54 	bl	8001090 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff fb50 	bl	8001090 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e045      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x470>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x444>
 8001a0a:	e03d      	b.n	8001a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e038      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x4ec>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d028      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d121      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d11a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d111      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0cc      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d90c      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d044      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d119      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e067      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4934      	ldr	r1, [pc, #208]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff fa82 	bl	8001090 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff fa7e 	bl	8001090 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e04f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d20c      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f874 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	0800669c 	.word	0x0800669c
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c68:	b094      	sub	sp, #80	; 0x50
 8001c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c70:	2300      	movs	r3, #0
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c74:	2300      	movs	r3, #0
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c7c:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d00d      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	f200 80e1 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x34>
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c96:	e0db      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c9c:	e0db      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca2:	e0d8      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cae:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d063      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	462b      	mov	r3, r5
 8001cda:	f04f 0000 	mov.w	r0, #0
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	0159      	lsls	r1, r3, #5
 8001ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce8:	0150      	lsls	r0, r2, #5
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4621      	mov	r1, r4
 8001cf0:	1a51      	subs	r1, r2, r1
 8001cf2:	6139      	str	r1, [r7, #16]
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d08:	4659      	mov	r1, fp
 8001d0a:	018b      	lsls	r3, r1, #6
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d12:	4651      	mov	r1, sl
 8001d14:	018a      	lsls	r2, r1, #6
 8001d16:	4651      	mov	r1, sl
 8001d18:	ebb2 0801 	subs.w	r8, r2, r1
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d36:	4690      	mov	r8, r2
 8001d38:	4699      	mov	r9, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	eb18 0303 	adds.w	r3, r8, r3
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	462b      	mov	r3, r5
 8001d44:	eb49 0303 	adc.w	r3, r9, r3
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d56:	4629      	mov	r1, r5
 8001d58:	024b      	lsls	r3, r1, #9
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d60:	4621      	mov	r1, r4
 8001d62:	024a      	lsls	r2, r1, #9
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d74:	f7fe fa8c 	bl	8000290 <__aeabi_uldivmod>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d80:	e058      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	099b      	lsrs	r3, r3, #6
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
 8001d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	464b      	mov	r3, r9
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0159      	lsls	r1, r3, #5
 8001daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dae:	0150      	lsls	r0, r2, #5
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4641      	mov	r1, r8
 8001db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dba:	4649      	mov	r1, r9
 8001dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	00eb      	lsls	r3, r5, #3
 8001de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dea:	00e2      	lsls	r2, r4, #3
 8001dec:	4614      	mov	r4, r2
 8001dee:	461d      	mov	r5, r3
 8001df0:	4643      	mov	r3, r8
 8001df2:	18e3      	adds	r3, r4, r3
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	464b      	mov	r3, r9
 8001df8:	eb45 0303 	adc.w	r3, r5, r3
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	028b      	lsls	r3, r1, #10
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e14:	4621      	mov	r1, r4
 8001e16:	028a      	lsls	r2, r1, #10
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	61fa      	str	r2, [r7, #28]
 8001e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e28:	f7fe fa32 	bl	8000290 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3750      	adds	r7, #80	; 0x50
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	080066ac 	.word	0x080066ac

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eb4:	f7ff ffdc 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	080066ac 	.word	0x080066ac

08001ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RCC_GetClockConfig+0x60>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0207 	and.w	r2, r3, #7
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e041      	b.n	8001fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f839 	bl	8001fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 f9ca 	bl	8002314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e044      	b.n	8002092 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x6c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d013      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x6c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x6c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x6c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_TIM_Base_Start_IT+0xbc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x6c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d010      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e007      	b.n	8002090 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40014000 	.word	0x40014000

080020b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d122      	bne.n	8002110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d11b      	bne.n	8002110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0202 	mvn.w	r2, #2
 80020e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8ee 	bl	80022d8 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8e0 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f8f1 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b04      	cmp	r3, #4
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0204 	mvn.w	r2, #4
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8c4 	bl	80022d8 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8b6 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8c7 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b08      	cmp	r3, #8
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0208 	mvn.w	r2, #8
 8002188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2204      	movs	r2, #4
 800218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f89a 	bl	80022d8 <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f88c 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f89d 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0210 	mvn.w	r2, #16
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2208      	movs	r2, #8
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f870 	bl	80022d8 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f862 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f873 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0201 	mvn.w	r2, #1
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fcd2 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002242:	2b80      	cmp	r3, #128	; 0x80
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8e2 	bl	8002428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f838 	bl	8002300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d10e      	bne.n	80022bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0220 	mvn.w	r2, #32
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8ac 	bl	8002414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a34      	ldr	r2, [pc, #208]	; (80023f8 <TIM_Base_SetConfig+0xe4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00f      	beq.n	800234c <TIM_Base_SetConfig+0x38>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002332:	d00b      	beq.n	800234c <TIM_Base_SetConfig+0x38>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a31      	ldr	r2, [pc, #196]	; (80023fc <TIM_Base_SetConfig+0xe8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <TIM_Base_SetConfig+0x38>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a30      	ldr	r2, [pc, #192]	; (8002400 <TIM_Base_SetConfig+0xec>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_Base_SetConfig+0x38>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <TIM_Base_SetConfig+0xf0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d108      	bne.n	800235e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <TIM_Base_SetConfig+0xe4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01b      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d017      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a22      	ldr	r2, [pc, #136]	; (80023fc <TIM_Base_SetConfig+0xe8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <TIM_Base_SetConfig+0xec>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00f      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a20      	ldr	r2, [pc, #128]	; (8002404 <TIM_Base_SetConfig+0xf0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00b      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <TIM_Base_SetConfig+0xf4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1e      	ldr	r2, [pc, #120]	; (800240c <TIM_Base_SetConfig+0xf8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x8a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <TIM_Base_SetConfig+0xfc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <TIM_Base_SetConfig+0xe4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40014000 	.word	0x40014000
 800240c:	40014400 	.word	0x40014400
 8002410:	40014800 	.word	0x40014800

08002414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e033      	b.n	80024b6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fbfa 	bl	8000c5c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f90b 	bl	800268c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002494:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b08a      	sub	sp, #40	; 0x28
 80024c2:	af02      	add	r7, sp, #8
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d17c      	bne.n	80025d4 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_USART_Transmit+0x28>
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e075      	b.n	80025d6 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_USART_Transmit+0x3a>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e06e      	b.n	80025d6 <HAL_USART_Transmit+0x118>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2212      	movs	r2, #18
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800250e:	f7fe fdbf 	bl	8001090 <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002528:	d108      	bne.n	800253c <HAL_USART_Transmit+0x7e>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e003      	b.n	8002544 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8002544:	e02a      	b.n	800259c <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f844 	bl	80025de <USART_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03a      	b.n	80025d6 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e007      	b.n	800258e <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cf      	bne.n	8002546 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f814 	bl	80025de <USART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e00a      	b.n	80025d6 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80025ee:	e038      	b.n	8002662 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d034      	beq.n	8002662 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <USART_WaitOnFlagUntilTimeout+0x30>
 80025fe:	f7fe fd47 	bl	8001090 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	429a      	cmp	r2, r3
 800260c:	d229      	bcs.n	8002662 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0220 	bic.w	r2, r2, #32
 800262c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e00f      	b.n	8002682 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d0b7      	beq.n	80025f0 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 800268c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002690:	b0c6      	sub	sp, #280	; 0x118
 8002692:	af00      	add	r7, sp, #0
 8002694:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800269e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f021 030c 	bic.w	r3, r1, #12
 80026b0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80026b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80026be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80026ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ce:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80026d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d4:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80026d6:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80026d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80026e6:	431a      	orrs	r2, r3
 80026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80026f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002700:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800270e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002712:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002716:	f023 030c 	bic.w	r3, r3, #12
 800271a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800271e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	431a      	orrs	r2, r3
 800272c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	431a      	orrs	r2, r3
 8002734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002738:	4313      	orrs	r3, r2
 800273a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800274c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800274e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6959      	ldr	r1, [r3, #20]
 8002756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8002760:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8002762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <USART_SetConfig+0x30c>)
 800276a:	429a      	cmp	r2, r3
 800276c:	d006      	beq.n	800277c <USART_SetConfig+0xf0>
 800276e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b89      	ldr	r3, [pc, #548]	; (800299c <USART_SetConfig+0x310>)
 8002776:	429a      	cmp	r2, r3
 8002778:	f040 8114 	bne.w	80029a4 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800277c:	f7ff fb98 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8002780:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002784:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800278e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002792:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	1891      	adds	r1, r2, r2
 800279c:	6739      	str	r1, [r7, #112]	; 0x70
 800279e:	415b      	adcs	r3, r3
 80027a0:	677b      	str	r3, [r7, #116]	; 0x74
 80027a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027a6:	4621      	mov	r1, r4
 80027a8:	eb12 0801 	adds.w	r8, r2, r1
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb43 0901 	adc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027d4:	462b      	mov	r3, r5
 80027d6:	eb49 0303 	adc.w	r3, r9, r3
 80027da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80027ea:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80027ee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80027f2:	460b      	mov	r3, r1
 80027f4:	18db      	adds	r3, r3, r3
 80027f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f8:	4613      	mov	r3, r2
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002800:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002804:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002808:	f7fd fd42 	bl	8000290 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <USART_SetConfig+0x314>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011c      	lsls	r4, r3, #4
 800281a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002824:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002828:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	6639      	str	r1, [r7, #96]	; 0x60
 8002834:	415b      	adcs	r3, r3
 8002836:	667b      	str	r3, [r7, #100]	; 0x64
 8002838:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800283c:	4641      	mov	r1, r8
 800283e:	1851      	adds	r1, r2, r1
 8002840:	65b9      	str	r1, [r7, #88]	; 0x58
 8002842:	4649      	mov	r1, r9
 8002844:	414b      	adcs	r3, r1
 8002846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8002854:	4659      	mov	r1, fp
 8002856:	00cb      	lsls	r3, r1, #3
 8002858:	4651      	mov	r1, sl
 800285a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285e:	4651      	mov	r1, sl
 8002860:	00ca      	lsls	r2, r1, #3
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4603      	mov	r3, r0
 8002868:	4642      	mov	r2, r8
 800286a:	189b      	adds	r3, r3, r2
 800286c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002870:	464b      	mov	r3, r9
 8002872:	460a      	mov	r2, r1
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800287c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002888:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800288c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002890:	460b      	mov	r3, r1
 8002892:	18db      	adds	r3, r3, r3
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
 8002896:	4613      	mov	r3, r2
 8002898:	eb42 0303 	adc.w	r3, r2, r3
 800289c:	657b      	str	r3, [r7, #84]	; 0x54
 800289e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028a2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028a6:	f7fd fcf3 	bl	8000290 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <USART_SetConfig+0x314>)
 80028b2:	fba3 2301 	umull	r2, r3, r3, r1
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2264      	movs	r2, #100	; 0x64
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	1acb      	subs	r3, r1, r3
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <USART_SetConfig+0x314>)
 80028c8:	fba3 2302 	umull	r2, r3, r3, r2
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d4:	441c      	add	r4, r3
 80028d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028e8:	4642      	mov	r2, r8
 80028ea:	464b      	mov	r3, r9
 80028ec:	1891      	adds	r1, r2, r2
 80028ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80028f0:	415b      	adcs	r3, r3
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028f8:	4641      	mov	r1, r8
 80028fa:	1851      	adds	r1, r2, r1
 80028fc:	6439      	str	r1, [r7, #64]	; 0x40
 80028fe:	4649      	mov	r1, r9
 8002900:	414b      	adcs	r3, r1
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8002910:	4659      	mov	r1, fp
 8002912:	00cb      	lsls	r3, r1, #3
 8002914:	4651      	mov	r1, sl
 8002916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800291a:	4651      	mov	r1, sl
 800291c:	00ca      	lsls	r2, r1, #3
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	4603      	mov	r3, r0
 8002924:	4642      	mov	r2, r8
 8002926:	189b      	adds	r3, r3, r2
 8002928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800292c:	464b      	mov	r3, r9
 800292e:	460a      	mov	r2, r1
 8002930:	eb42 0303 	adc.w	r3, r2, r3
 8002934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002944:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800294c:	460b      	mov	r3, r1
 800294e:	18db      	adds	r3, r3, r3
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
 8002952:	4613      	mov	r3, r2
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800295e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002962:	f7fd fc95 	bl	8000290 <__aeabi_uldivmod>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <USART_SetConfig+0x314>)
 800296c:	fba3 1302 	umull	r1, r3, r3, r2
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	2164      	movs	r1, #100	; 0x64
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3332      	adds	r3, #50	; 0x32
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <USART_SetConfig+0x314>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	f003 0207 	and.w	r2, r3, #7
 800298a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4422      	add	r2, r4
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e109      	b.n	8002baa <USART_SetConfig+0x51e>
 8002996:	bf00      	nop
 8002998:	40011000 	.word	0x40011000
 800299c:	40011400 	.word	0x40011400
 80029a0:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff fa70 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80029a8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80029ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029b0:	2200      	movs	r2, #0
 80029b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029ba:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029be:	4642      	mov	r2, r8
 80029c0:	464b      	mov	r3, r9
 80029c2:	1891      	adds	r1, r2, r2
 80029c4:	6339      	str	r1, [r7, #48]	; 0x30
 80029c6:	415b      	adcs	r3, r3
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029ce:	4641      	mov	r1, r8
 80029d0:	1854      	adds	r4, r2, r1
 80029d2:	4649      	mov	r1, r9
 80029d4:	eb43 0501 	adc.w	r5, r3, r1
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	00eb      	lsls	r3, r5, #3
 80029e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e6:	00e2      	lsls	r2, r4, #3
 80029e8:	4614      	mov	r4, r2
 80029ea:	461d      	mov	r5, r3
 80029ec:	4643      	mov	r3, r8
 80029ee:	18e3      	adds	r3, r4, r3
 80029f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029f4:	464b      	mov	r3, r9
 80029f6:	eb45 0303 	adc.w	r3, r5, r3
 80029fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a0a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a0e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a12:	460b      	mov	r3, r1
 8002a14:	18db      	adds	r3, r3, r3
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a18:	4613      	mov	r3, r2
 8002a1a:	eb42 0303 	adc.w	r3, r2, r3
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a24:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a28:	f7fd fc32 	bl	8000290 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <USART_SetConfig+0x52c>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	011c      	lsls	r4, r3, #4
 8002a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a48:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	6239      	str	r1, [r7, #32]
 8002a54:	415b      	adcs	r3, r3
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a62:	4649      	mov	r1, r9
 8002a64:	eb43 0b01 	adc.w	fp, r3, r1
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7c:	4692      	mov	sl, r2
 8002a7e:	469b      	mov	fp, r3
 8002a80:	4643      	mov	r3, r8
 8002a82:	eb1a 0303 	adds.w	r3, sl, r3
 8002a86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aa0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002aa4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	18db      	adds	r3, r3, r3
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	eb42 0303 	adc.w	r3, r2, r3
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aba:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002abe:	f7fd fbe7 	bl	8000290 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <USART_SetConfig+0x52c>)
 8002aca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	; 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <USART_SetConfig+0x52c>)
 8002ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aec:	441c      	add	r4, r3
 8002aee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	6139      	str	r1, [r7, #16]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b44:	464b      	mov	r3, r9
 8002b46:	460a      	mov	r2, r1
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002b60:	460b      	mov	r3, r1
 8002b62:	18db      	adds	r3, r3, r3
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	eb42 0303 	adc.w	r3, r2, r3
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b76:	f7fd fb8b 	bl	8000290 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <USART_SetConfig+0x52c>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <USART_SetConfig+0x52c>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	51eb851f 	.word	0x51eb851f

08002bbc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0208 	add.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0208 	add.w	r2, r3, #8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0208 	add.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d103      	bne.n	8002c36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e00c      	b.n	8002c50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3308      	adds	r3, #8
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <vListInsert+0x2e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d2f6      	bcs.n	8002c3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6892      	ldr	r2, [r2, #8]
 8002c9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6852      	ldr	r2, [r2, #4]
 8002ca8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d103      	bne.n	8002cbc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1e5a      	subs	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05d      	beq.n	8002dcc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d059      	beq.n	8002dcc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2100      	movs	r1, #0
 8002d22:	fba3 2302 	umull	r2, r3, r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d000      	beq.n	8002d2c <xQueueGenericReset+0x50>
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d14c      	bne.n	8002dcc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002d32:	f001 ff07 	bl	8004b44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	6939      	ldr	r1, [r7, #16]
 8002d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	441a      	add	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	441a      	add	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	22ff      	movs	r2, #255	; 0xff
 8002d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d114      	bne.n	8002db2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01a      	beq.n	8002dc6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	3310      	adds	r3, #16
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 f909 	bl	8003fac <xTaskRemoveFromEventList>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002da0:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <xQueueGenericReset+0x11c>)
 8002da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	e009      	b.n	8002dc6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	3310      	adds	r3, #16
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff00 	bl	8002bbc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fefb 	bl	8002bbc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002dc6:	f001 feed 	bl	8004ba4 <vPortExitCritical>
 8002dca:	e001      	b.n	8002dd0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <xQueueGenericReset+0x110>
        __asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	60bb      	str	r3, [r7, #8]
    }
 8002de8:	bf00      	nop
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002dec:	697b      	ldr	r3, [r7, #20]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000ed04 	.word	0xe000ed04

08002dfc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02e      	beq.n	8002e72 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e14:	2100      	movs	r1, #0
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d000      	beq.n	8002e24 <xQueueGenericCreate+0x28>
 8002e22:	2101      	movs	r1, #1
 8002e24:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d123      	bne.n	8002e72 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e32:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002e36:	d81c      	bhi.n	8002e72 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3350      	adds	r3, #80	; 0x50
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 ff60 	bl	8004d0c <pvPortMalloc>
 8002e4c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01c      	beq.n	8002e8e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3350      	adds	r3, #80	; 0x50
 8002e5c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f814 	bl	8002e98 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002e70:	e00d      	b.n	8002e8e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericCreate+0x92>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	613b      	str	r3, [r7, #16]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
    }
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e002      	b.n	8002eba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	69b8      	ldr	r0, [r7, #24]
 8002eca:	f7ff ff07 	bl	8002cdc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	; 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <xQueueGenericSend+0x32>
        __asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	623b      	str	r3, [r7, #32]
    }
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <xQueueGenericSend+0x40>
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <xQueueGenericSend+0x44>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <xQueueGenericSend+0x46>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <xQueueGenericSend+0x60>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	61fb      	str	r3, [r7, #28]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSend+0x6e>
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <xQueueGenericSend+0x72>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <xQueueGenericSend+0x74>
 8002f52:	2300      	movs	r3, #0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <xQueueGenericSend+0x8e>
        __asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	61bb      	str	r3, [r7, #24]
    }
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f6e:	f001 fde9 	bl	8004b44 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <xQueueGenericSend+0xa4>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d129      	bne.n	8002fd8 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8a:	f000 fa63 	bl	8003454 <prvCopyDataToQueue>
 8002f8e:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	3324      	adds	r3, #36	; 0x24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f805 	bl	8003fac <xTaskRemoveFromEventList>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <xQueueGenericSend+0x1c8>)
 8002faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	e00a      	b.n	8002fd0 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <xQueueGenericSend+0x1c8>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002fd0:	f001 fde8 	bl	8004ba4 <vPortExitCritical>
                return pdPASS;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e063      	b.n	80030a0 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002fde:	f001 fde1 	bl	8004ba4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e05c      	b.n	80030a0 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 f8b1 	bl	8004158 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ffa:	f001 fdd3 	bl	8004ba4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ffe:	f000 fd35 	bl	8003a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003002:	f001 fd9f 	bl	8004b44 <vPortEnterCritical>
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d103      	bne.n	800301c <xQueueGenericSend+0x13c>
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003022:	b25b      	sxtb	r3, r3
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d103      	bne.n	8003032 <xQueueGenericSend+0x152>
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003032:	f001 fdb7 	bl	8004ba4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003036:	1d3a      	adds	r2, r7, #4
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f8a0 	bl	8004184 <xTaskCheckForTimeOut>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d124      	bne.n	8003094 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800304a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304c:	f000 fafa 	bl	8003644 <prvIsQueueFull>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	3310      	adds	r3, #16
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f000 ff80 	bl	8003f64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003066:	f000 fa85 	bl	8003574 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800306a:	f000 fd0d 	bl	8003a88 <xTaskResumeAll>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af7c 	bne.w	8002f6e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <xQueueGenericSend+0x1c8>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	e772      	b.n	8002f6e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308a:	f000 fa73 	bl	8003574 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800308e:	f000 fcfb 	bl	8003a88 <xTaskResumeAll>
 8003092:	e76c      	b.n	8002f6e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003096:	f000 fa6d 	bl	8003574 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800309a:	f000 fcf5 	bl	8003a88 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800309e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3730      	adds	r7, #48	; 0x30
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <xQueueReceive+0x30>
        __asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	623b      	str	r3, [r7, #32]
    }
 80030d8:	bf00      	nop
 80030da:	e7fe      	b.n	80030da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <xQueueReceive+0x3e>
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueReceive+0x42>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueReceive+0x44>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xQueueReceive+0x5e>
        __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61fb      	str	r3, [r7, #28]
    }
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800310a:	f001 fd1b 	bl	8004b44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01f      	beq.n	800315a <xQueueReceive+0xae>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311e:	f000 fa03 	bl	8003528 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00f      	beq.n	8003152 <xQueueReceive+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	3310      	adds	r3, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ff38 	bl	8003fac <xTaskRemoveFromEventList>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <xQueueReceive+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <xQueueReceive+0x18c>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003152:	f001 fd27 	bl	8004ba4 <vPortExitCritical>
                return pdPASS;
 8003156:	2301      	movs	r3, #1
 8003158:	e069      	b.n	800322e <xQueueReceive+0x182>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003160:	f001 fd20 	bl	8004ba4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003164:	2300      	movs	r3, #0
 8003166:	e062      	b.n	800322e <xQueueReceive+0x182>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <xQueueReceive+0xd0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fff0 	bl	8004158 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800317c:	f001 fd12 	bl	8004ba4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003180:	f000 fc74 	bl	8003a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003184:	f001 fcde 	bl	8004b44 <vPortEnterCritical>
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800318e:	b25b      	sxtb	r3, r3
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d103      	bne.n	800319e <xQueueReceive+0xf2>
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a4:	b25b      	sxtb	r3, r3
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d103      	bne.n	80031b4 <xQueueReceive+0x108>
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b4:	f001 fcf6 	bl	8004ba4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031b8:	1d3a      	adds	r2, r7, #4
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 ffdf 	bl	8004184 <xTaskCheckForTimeOut>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d123      	bne.n	8003214 <xQueueReceive+0x168>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ce:	f000 fa23 	bl	8003618 <prvIsQueueEmpty>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d017      	beq.n	8003208 <xQueueReceive+0x15c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	3324      	adds	r3, #36	; 0x24
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 febf 	bl	8003f64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80031e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e8:	f000 f9c4 	bl	8003574 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80031ec:	f000 fc4c 	bl	8003a88 <xTaskResumeAll>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d189      	bne.n	800310a <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <xQueueReceive+0x18c>)
 80031f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	e780      	b.n	800310a <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320a:	f000 f9b3 	bl	8003574 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800320e:	f000 fc3b 	bl	8003a88 <xTaskResumeAll>
 8003212:	e77a      	b.n	800310a <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003216:	f000 f9ad 	bl	8003574 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800321a:	f000 fc35 	bl	8003a88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800321e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003220:	f000 f9fa 	bl	8003618 <prvIsQueueEmpty>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f43f af6f 	beq.w	800310a <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800322c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800322e:	4618      	mov	r0, r3
 8003230:	3730      	adds	r7, #48	; 0x30
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	61bb      	str	r3, [r7, #24]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	617b      	str	r3, [r7, #20]
    }
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800328c:	f001 fc5a 	bl	8004b44 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d024      	beq.n	80032e6 <xQueueSemaphoreTake+0xaa>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032ac:	f001 fa0c 	bl	80046c8 <pvTaskIncrementMutexHeldCount>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00f      	beq.n	80032de <xQueueSemaphoreTake+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3310      	adds	r3, #16
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fe72 	bl	8003fac <xTaskRemoveFromEventList>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <xQueueSemaphoreTake+0xa2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <xQueueSemaphoreTake+0x1e4>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032de:	f001 fc61 	bl	8004ba4 <vPortExitCritical>
                return pdPASS;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e097      	b.n	8003416 <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <xQueueSemaphoreTake+0xcc>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	613b      	str	r3, [r7, #16]
    }
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xQueueSemaphoreTake+0xca>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003308:	f001 fc4c 	bl	8004ba4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800330c:	2300      	movs	r3, #0
 800330e:	e082      	b.n	8003416 <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f000 ff1c 	bl	8004158 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003320:	2301      	movs	r3, #1
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003324:	f001 fc3e 	bl	8004ba4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003328:	f000 fba0 	bl	8003a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800332c:	f001 fc0a 	bl	8004b44 <vPortEnterCritical>
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d103      	bne.n	8003346 <xQueueSemaphoreTake+0x10a>
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800334c:	b25b      	sxtb	r3, r3
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d103      	bne.n	800335c <xQueueSemaphoreTake+0x120>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335c:	f001 fc22 	bl	8004ba4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003360:	463a      	mov	r2, r7
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff0b 	bl	8004184 <xTaskCheckForTimeOut>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d132      	bne.n	80033da <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003376:	f000 f94f 	bl	8003618 <prvIsQueueEmpty>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d026      	beq.n	80033ce <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 8003388:	f001 fbdc 	bl	8004b44 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f81b 	bl	80043cc <xTaskPriorityInherit>
 8003396:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8003398:	f001 fc04 	bl	8004ba4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3324      	adds	r3, #36	; 0x24
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fddd 	bl	8003f64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80033aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033ac:	f000 f8e2 	bl	8003574 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80033b0:	f000 fb6a 	bl	8003a88 <xTaskResumeAll>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f47f af68 	bne.w	800328c <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <xQueueSemaphoreTake+0x1e4>)
 80033be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	e75e      	b.n	800328c <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80033ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d0:	f000 f8d0 	bl	8003574 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033d4:	f000 fb58 	bl	8003a88 <xTaskResumeAll>
 80033d8:	e758      	b.n	800328c <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80033da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033dc:	f000 f8ca 	bl	8003574 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033e0:	f000 fb52 	bl	8003a88 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033e6:	f000 f917 	bl	8003618 <prvIsQueueEmpty>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f43f af4d 	beq.w	800328c <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 80033f8:	f001 fba4 	bl	8004b44 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033fe:	f000 f811 	bl	8003424 <prvGetDisinheritPriorityAfterTimeout>
 8003402:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	69f9      	ldr	r1, [r7, #28]
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f8a4 	bl	8004558 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003410:	f001 fbc8 	bl	8004ba4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003414:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003416:	4618      	mov	r0, r3
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1c3 0305 	rsb	r3, r3, #5
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e001      	b.n	8003446 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003446:	68fb      	ldr	r3, [r7, #12]
    }
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d14d      	bne.n	8003516 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f806 	bl	8004490 <xTaskPriorityDisinherit>
 8003484:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e043      	b.n	8003516 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d119      	bne.n	80034c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6858      	ldr	r0, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	461a      	mov	r2, r3
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	f001 fe5c 	bl	800515c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	441a      	add	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d32b      	bcc.n	8003516 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e026      	b.n	8003516 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68d8      	ldr	r0, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	461a      	mov	r2, r3
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	f001 fe42 	bl	800515c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	425b      	negs	r3, r3
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d207      	bcs.n	8003504 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	425b      	negs	r3, r3
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d105      	bne.n	8003516 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	3b01      	subs	r3, #1
 8003514:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800351e:	697b      	ldr	r3, [r7, #20]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	441a      	add	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	d303      	bcc.n	800355c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68d9      	ldr	r1, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	461a      	mov	r2, r3
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	f001 fdf8 	bl	800515c <memcpy>
    }
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800357c:	f001 fae2 	bl	8004b44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003586:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003588:	e011      	b.n	80035ae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd08 	bl	8003fac <xTaskRemoveFromEventList>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80035a2:	f000 fe55 	bl	8004250 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	dce9      	bgt.n	800358a <prvUnlockQueue+0x16>
 80035b6:	e000      	b.n	80035ba <prvUnlockQueue+0x46>
                        break;
 80035b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	22ff      	movs	r2, #255	; 0xff
 80035be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80035c2:	f001 faef 	bl	8004ba4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80035c6:	f001 fabd 	bl	8004b44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035d2:	e011      	b.n	80035f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d012      	beq.n	8003602 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3310      	adds	r3, #16
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fce3 	bl	8003fac <xTaskRemoveFromEventList>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80035ec:	f000 fe30 	bl	8004250 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	dce9      	bgt.n	80035d4 <prvUnlockQueue+0x60>
 8003600:	e000      	b.n	8003604 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003602:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800360c:	f001 faca 	bl	8004ba4 <vPortExitCritical>
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003620:	f001 fa90 	bl	8004b44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e001      	b.n	8003636 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003636:	f001 fab5 	bl	8004ba4 <vPortExitCritical>

    return xReturn;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800364c:	f001 fa7a 	bl	8004b44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	429a      	cmp	r2, r3
 800365a:	d102      	bne.n	8003662 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e001      	b.n	8003666 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003666:	f001 fa9d 	bl	8004ba4 <vPortExitCritical>

    return xReturn;
 800366a:	68fb      	ldr	r3, [r7, #12]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af04      	add	r7, sp, #16
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fb3f 	bl	8004d0c <pvPortMalloc>
 800368e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003696:	2058      	movs	r0, #88	; 0x58
 8003698:	f001 fb38 	bl	8004d0c <pvPortMalloc>
 800369c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
 80036aa:	e005      	b.n	80036b8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80036ac:	6978      	ldr	r0, [r7, #20]
 80036ae:	f001 fc0d 	bl	8004ecc <vPortFree>
 80036b2:	e001      	b.n	80036b8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f80e 	bl	80036f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80036da:	69f8      	ldr	r0, [r7, #28]
 80036dc:	f000 f8b0 	bl	8003840 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80036e0:	2301      	movs	r3, #1
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e002      	b.n	80036ec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80036ec:	69bb      	ldr	r3, [r7, #24]
    }
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b088      	sub	sp, #32
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	461a      	mov	r2, r3
 800370e:	21a5      	movs	r1, #165	; 0xa5
 8003710:	f001 fd32 	bl	8005178 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800371e:	3b01      	subs	r3, #1
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f023 0307 	bic.w	r3, r3, #7
 800372c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <prvInitialiseNewTask+0x58>
        __asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	617b      	str	r3, [r7, #20]
    }
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01f      	beq.n	8003794 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e012      	b.n	8003780 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	7819      	ldrb	r1, [r3, #0]
 8003762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	3334      	adds	r3, #52	; 0x34
 800376a:	460a      	mov	r2, r1
 800376c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3301      	adds	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b09      	cmp	r3, #9
 8003784:	d9e9      	bls.n	800375a <prvInitialiseNewTask+0x64>
 8003786:	e000      	b.n	800378a <prvInitialiseNewTask+0x94>
            {
                break;
 8003788:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003792:	e003      	b.n	800379c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d90a      	bls.n	80037b8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	613b      	str	r3, [r7, #16]
    }
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d901      	bls.n	80037c2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037be:	2304      	movs	r3, #4
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	2200      	movs	r2, #0
 80037d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	3304      	adds	r3, #4
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fa0f 	bl	8002bfc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	3318      	adds	r3, #24
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fa0a 	bl	8002bfc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	f1c3 0205 	rsb	r2, r3, #5
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	3350      	adds	r3, #80	; 0x50
 8003802:	2204      	movs	r2, #4
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f001 fcb6 	bl	8005178 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	3354      	adds	r3, #84	; 0x54
 8003810:	2201      	movs	r2, #1
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f001 fcaf 	bl	8005178 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	69b8      	ldr	r0, [r7, #24]
 8003820:	f000 ffe6 	bl	80047f0 <pxPortInitialiseStack>
 8003824:	4602      	mov	r2, r0
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003836:	bf00      	nop
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003848:	f001 f97c 	bl	8004b44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <prvAddNewTaskToReadyList+0x110>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a3f      	ldr	r2, [pc, #252]	; (8003950 <prvAddNewTaskToReadyList+0x110>)
 8003854:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <prvAddNewTaskToReadyList+0x114>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800385e:	4a3d      	ldr	r2, [pc, #244]	; (8003954 <prvAddNewTaskToReadyList+0x114>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003864:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <prvAddNewTaskToReadyList+0x110>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d110      	bne.n	800388e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800386c:	f000 fd14 	bl	8004298 <prvInitialiseTaskLists>
 8003870:	e00d      	b.n	800388e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <prvAddNewTaskToReadyList+0x118>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <prvAddNewTaskToReadyList+0x114>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	429a      	cmp	r2, r3
 8003886:	d802      	bhi.n	800388e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003888:	4a32      	ldr	r2, [pc, #200]	; (8003954 <prvAddNewTaskToReadyList+0x114>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <prvAddNewTaskToReadyList+0x11c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a31      	ldr	r2, [pc, #196]	; (800395c <prvAddNewTaskToReadyList+0x11c>)
 8003896:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <prvAddNewTaskToReadyList+0x11c>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <prvAddNewTaskToReadyList+0x120>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <prvAddNewTaskToReadyList+0x120>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	492b      	ldr	r1, [pc, #172]	; (8003964 <prvAddNewTaskToReadyList+0x124>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3304      	adds	r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	3204      	adds	r2, #4
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	1d1a      	adds	r2, r3, #4
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <prvAddNewTaskToReadyList+0x124>)
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	615a      	str	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4918      	ldr	r1, [pc, #96]	; (8003964 <prvAddNewTaskToReadyList+0x124>)
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	4814      	ldr	r0, [pc, #80]	; (8003964 <prvAddNewTaskToReadyList+0x124>)
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4403      	add	r3, r0
 800391c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800391e:	f001 f941 	bl	8004ba4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <prvAddNewTaskToReadyList+0x118>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddNewTaskToReadyList+0x114>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	429a      	cmp	r2, r3
 8003936:	d207      	bcs.n	8003948 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <prvAddNewTaskToReadyList+0x128>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000304 	.word	0x20000304
 8003954:	2000022c 	.word	0x2000022c
 8003958:	20000310 	.word	0x20000310
 800395c:	20000320 	.word	0x20000320
 8003960:	2000030c 	.word	0x2000030c
 8003964:	20000230 	.word	0x20000230
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <vTaskDelay+0x60>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <vTaskDelay+0x30>
        __asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60bb      	str	r3, [r7, #8]
    }
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800399c:	f000 f866 	bl	8003a6c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fea4 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80039a8:	f000 f86e 	bl	8003a88 <xTaskResumeAll>
 80039ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <vTaskDelay+0x64>)
 80039b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000032c 	.word	0x2000032c
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <vTaskStartScheduler+0x7c>)
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	2300      	movs	r3, #0
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	2282      	movs	r2, #130	; 0x82
 80039e6:	491b      	ldr	r1, [pc, #108]	; (8003a54 <vTaskStartScheduler+0x80>)
 80039e8:	481b      	ldr	r0, [pc, #108]	; (8003a58 <vTaskStartScheduler+0x84>)
 80039ea:	f7ff fe43 	bl	8003674 <xTaskCreate>
 80039ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d116      	bne.n	8003a24 <vTaskStartScheduler+0x50>
        __asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60bb      	str	r3, [r7, #8]
    }
 8003a08:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <vTaskStartScheduler+0x88>)
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <vTaskStartScheduler+0x8c>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <vTaskStartScheduler+0x90>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003a1e:	f000 ff71 	bl	8004904 <xPortStartScheduler>
 8003a22:	e00e      	b.n	8003a42 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d10a      	bne.n	8003a42 <vTaskStartScheduler+0x6e>
        __asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	607b      	str	r3, [r7, #4]
    }
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <vTaskStartScheduler+0x94>)
 8003a44:	681b      	ldr	r3, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000328 	.word	0x20000328
 8003a54:	08006694 	.word	0x08006694
 8003a58:	08004269 	.word	0x08004269
 8003a5c:	20000324 	.word	0x20000324
 8003a60:	20000310 	.word	0x20000310
 8003a64:	20000308 	.word	0x20000308
 8003a68:	2000000c 	.word	0x2000000c

08003a6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <vTaskSuspendAll+0x18>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <vTaskSuspendAll+0x18>)
 8003a78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	2000032c 	.word	0x2000032c

08003a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003a96:	4b71      	ldr	r3, [pc, #452]	; (8003c5c <xTaskResumeAll+0x1d4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <xTaskResumeAll+0x2c>
        __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	607b      	str	r3, [r7, #4]
    }
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ab4:	f001 f846 	bl	8004b44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ab8:	4b68      	ldr	r3, [pc, #416]	; (8003c5c <xTaskResumeAll+0x1d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	4a67      	ldr	r2, [pc, #412]	; (8003c5c <xTaskResumeAll+0x1d4>)
 8003ac0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac2:	4b66      	ldr	r3, [pc, #408]	; (8003c5c <xTaskResumeAll+0x1d4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 80c0 	bne.w	8003c4c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003acc:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <xTaskResumeAll+0x1d8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80bb 	beq.w	8003c4c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad6:	e08a      	b.n	8003bee <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad8:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <xTaskResumeAll+0x1dc>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	6a12      	ldr	r2, [r2, #32]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	69d2      	ldr	r2, [r2, #28]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3318      	adds	r3, #24
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d103      	bne.n	8003b0e <xTaskResumeAll+0x86>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2200      	movs	r2, #0
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1e5a      	subs	r2, r3, #1
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	68d2      	ldr	r2, [r2, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d103      	bne.n	8003b4c <xTaskResumeAll+0xc4>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	615a      	str	r2, [r3, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	1e5a      	subs	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <xTaskResumeAll+0x1e0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	4a3f      	ldr	r2, [pc, #252]	; (8003c68 <xTaskResumeAll+0x1e0>)
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	493e      	ldr	r1, [pc, #248]	; (8003c6c <xTaskResumeAll+0x1e4>)
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3304      	adds	r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	3204      	adds	r2, #4
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <xTaskResumeAll+0x1e4>)
 8003bb2:	441a      	add	r2, r3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	615a      	str	r2, [r3, #20]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	492b      	ldr	r1, [pc, #172]	; (8003c6c <xTaskResumeAll+0x1e4>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c59      	adds	r1, r3, #1
 8003bcc:	4827      	ldr	r0, [pc, #156]	; (8003c6c <xTaskResumeAll+0x1e4>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4403      	add	r3, r0
 8003bd8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <xTaskResumeAll+0x1e8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <xTaskResumeAll+0x1ec>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <xTaskResumeAll+0x1dc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f47f af70 	bne.w	8003ad8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003bfe:	f000 fbc9 	bl	8004394 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <xTaskResumeAll+0x1f0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003c0e:	f000 f837 	bl	8003c80 <xTaskIncrementTick>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <xTaskResumeAll+0x1ec>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f1      	bne.n	8003c0e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <xTaskResumeAll+0x1f0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <xTaskResumeAll+0x1ec>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <xTaskResumeAll+0x1f4>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003c4c:	f000 ffaa 	bl	8004ba4 <vPortExitCritical>

    return xAlreadyYielded;
 8003c50:	69bb      	ldr	r3, [r7, #24]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000032c 	.word	0x2000032c
 8003c60:	20000304 	.word	0x20000304
 8003c64:	200002c4 	.word	0x200002c4
 8003c68:	2000030c 	.word	0x2000030c
 8003c6c:	20000230 	.word	0x20000230
 8003c70:	2000022c 	.word	0x2000022c
 8003c74:	20000318 	.word	0x20000318
 8003c78:	20000314 	.word	0x20000314
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <xTaskIncrementTick+0x200>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 80ec 	bne.w	8003e6c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c94:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <xTaskIncrementTick+0x204>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c9c:	4a79      	ldr	r2, [pc, #484]	; (8003e84 <xTaskIncrementTick+0x204>)
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d120      	bne.n	8003cea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ca8:	4b77      	ldr	r3, [pc, #476]	; (8003e88 <xTaskIncrementTick+0x208>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <xTaskIncrementTick+0x48>
        __asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	607b      	str	r3, [r7, #4]
    }
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskIncrementTick+0x46>
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	; (8003e88 <xTaskIncrementTick+0x208>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <xTaskIncrementTick+0x20c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6d      	ldr	r2, [pc, #436]	; (8003e88 <xTaskIncrementTick+0x208>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4a6d      	ldr	r2, [pc, #436]	; (8003e8c <xTaskIncrementTick+0x20c>)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <xTaskIncrementTick+0x210>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	4a6b      	ldr	r2, [pc, #428]	; (8003e90 <xTaskIncrementTick+0x210>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	f000 fb55 	bl	8004394 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003cea:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <xTaskIncrementTick+0x214>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f0c0 80a6 	bcc.w	8003e42 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf6:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <xTaskIncrementTick+0x208>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <xTaskIncrementTick+0x214>)
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	601a      	str	r2, [r3, #0]
                    break;
 8003d08:	e09b      	b.n	8003e42 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <xTaskIncrementTick+0x208>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d203      	bcs.n	8003d2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d22:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <xTaskIncrementTick+0x214>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003d28:	e08b      	b.n	8003e42 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	68d2      	ldr	r2, [r2, #12]
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	6892      	ldr	r2, [r2, #8]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d103      	bne.n	8003d58 <xTaskIncrementTick+0xd8>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	615a      	str	r2, [r3, #20]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	1e5a      	subs	r2, r3, #1
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01e      	beq.n	8003dae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	6a12      	ldr	r2, [r2, #32]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	69d2      	ldr	r2, [r2, #28]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3318      	adds	r3, #24
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d103      	bne.n	8003d9e <xTaskIncrementTick+0x11e>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2200      	movs	r2, #0
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1e5a      	subs	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	2201      	movs	r2, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <xTaskIncrementTick+0x218>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	4a36      	ldr	r2, [pc, #216]	; (8003e98 <xTaskIncrementTick+0x218>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4935      	ldr	r1, [pc, #212]	; (8003e9c <xTaskIncrementTick+0x21c>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	3204      	adds	r2, #4
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1d1a      	adds	r2, r3, #4
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <xTaskIncrementTick+0x21c>)
 8003e04:	441a      	add	r2, r3
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	615a      	str	r2, [r3, #20]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4923      	ldr	r1, [pc, #140]	; (8003e9c <xTaskIncrementTick+0x21c>)
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	481f      	ldr	r0, [pc, #124]	; (8003e9c <xTaskIncrementTick+0x21c>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4403      	add	r3, r0
 8003e2a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <xTaskIncrementTick+0x220>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	f4ff af5d 	bcc.w	8003cf6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e40:	e759      	b.n	8003cf6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <xTaskIncrementTick+0x220>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4914      	ldr	r1, [pc, #80]	; (8003e9c <xTaskIncrementTick+0x21c>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d901      	bls.n	8003e5e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <xTaskIncrementTick+0x224>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	e004      	b.n	8003e76 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <xTaskIncrementTick+0x228>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <xTaskIncrementTick+0x228>)
 8003e74:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	2000032c 	.word	0x2000032c
 8003e84:	20000308 	.word	0x20000308
 8003e88:	200002bc 	.word	0x200002bc
 8003e8c:	200002c0 	.word	0x200002c0
 8003e90:	2000031c 	.word	0x2000031c
 8003e94:	20000324 	.word	0x20000324
 8003e98:	2000030c 	.word	0x2000030c
 8003e9c:	20000230 	.word	0x20000230
 8003ea0:	2000022c 	.word	0x2000022c
 8003ea4:	20000318 	.word	0x20000318
 8003ea8:	20000314 	.word	0x20000314

08003eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <vTaskSwitchContext+0xa4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <vTaskSwitchContext+0xa8>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003ec0:	e03f      	b.n	8003f42 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <vTaskSwitchContext+0xa8>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <vTaskSwitchContext+0xac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	f1c3 031f 	rsb	r3, r3, #31
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	491f      	ldr	r1, [pc, #124]	; (8003f5c <vTaskSwitchContext+0xb0>)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	607b      	str	r3, [r7, #4]
    }
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <vTaskSwitchContext+0x5a>
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <vTaskSwitchContext+0xb0>)
 8003f14:	4413      	add	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d104      	bne.n	8003f38 <vTaskSwitchContext+0x8c>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a08      	ldr	r2, [pc, #32]	; (8003f60 <vTaskSwitchContext+0xb4>)
 8003f40:	6013      	str	r3, [r2, #0]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2000032c 	.word	0x2000032c
 8003f54:	20000318 	.word	0x20000318
 8003f58:	2000030c 	.word	0x2000030c
 8003f5c:	20000230 	.word	0x20000230
 8003f60:	2000022c 	.word	0x2000022c

08003f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	60fb      	str	r3, [r7, #12]
    }
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <vTaskPlaceOnEventList+0x44>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fe fe3f 	bl	8002c16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f98:	2101      	movs	r1, #1
 8003f9a:	6838      	ldr	r0, [r7, #0]
 8003f9c:	f000 fba8 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	2000022c 	.word	0x2000022c

08003fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b08b      	sub	sp, #44	; 0x2c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
    }
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	6a12      	ldr	r2, [r2, #32]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	69d2      	ldr	r2, [r2, #28]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d103      	bne.n	8004006 <xTaskRemoveFromEventList+0x5a>
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	2200      	movs	r2, #0
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <xTaskRemoveFromEventList+0x194>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d15e      	bne.n	80040dc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	68d2      	ldr	r2, [r2, #12]
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	6a3a      	ldr	r2, [r7, #32]
 8004034:	6892      	ldr	r2, [r2, #8]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	3304      	adds	r3, #4
 8004040:	429a      	cmp	r2, r3
 8004042:	d103      	bne.n	800404c <xTaskRemoveFromEventList+0xa0>
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2200      	movs	r2, #0
 8004050:	615a      	str	r2, [r3, #20]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	2201      	movs	r2, #1
 8004062:	409a      	lsls	r2, r3
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <xTaskRemoveFromEventList+0x198>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	4a36      	ldr	r2, [pc, #216]	; (8004144 <xTaskRemoveFromEventList+0x198>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4935      	ldr	r1, [pc, #212]	; (8004148 <xTaskRemoveFromEventList+0x19c>)
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3304      	adds	r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	6a3a      	ldr	r2, [r7, #32]
 8004098:	3204      	adds	r2, #4
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a25      	ldr	r2, [pc, #148]	; (8004148 <xTaskRemoveFromEventList+0x19c>)
 80040b2:	441a      	add	r2, r3
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	615a      	str	r2, [r3, #20]
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	4922      	ldr	r1, [pc, #136]	; (8004148 <xTaskRemoveFromEventList+0x19c>)
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	481e      	ldr	r0, [pc, #120]	; (8004148 <xTaskRemoveFromEventList+0x19c>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4403      	add	r3, r0
 80040d8:	6019      	str	r1, [r3, #0]
 80040da:	e01b      	b.n	8004114 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <xTaskRemoveFromEventList+0x1a0>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	61da      	str	r2, [r3, #28]
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	621a      	str	r2, [r3, #32]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	3218      	adds	r2, #24
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f103 0218 	add.w	r2, r3, #24
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <xTaskRemoveFromEventList+0x1a0>)
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <xTaskRemoveFromEventList+0x1a0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	4a0e      	ldr	r2, [pc, #56]	; (800414c <xTaskRemoveFromEventList+0x1a0>)
 8004112:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <xTaskRemoveFromEventList+0x1a4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	429a      	cmp	r2, r3
 8004120:	d905      	bls.n	800412e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <xTaskRemoveFromEventList+0x1a8>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e001      	b.n	8004132 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004134:	4618      	mov	r0, r3
 8004136:	372c      	adds	r7, #44	; 0x2c
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	2000032c 	.word	0x2000032c
 8004144:	2000030c 	.word	0x2000030c
 8004148:	20000230 	.word	0x20000230
 800414c:	200002c4 	.word	0x200002c4
 8004150:	2000022c 	.word	0x2000022c
 8004154:	20000318 	.word	0x20000318

08004158 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <vTaskInternalSetTimeOutState+0x24>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <vTaskInternalSetTimeOutState+0x28>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	605a      	str	r2, [r3, #4]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	2000031c 	.word	0x2000031c
 8004180:	20000308 	.word	0x20000308

08004184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	613b      	str	r3, [r7, #16]
    }
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
    }
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80041c6:	f000 fcbd 	bl	8004b44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80041ca:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <xTaskCheckForTimeOut+0xc4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d102      	bne.n	80041ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e026      	b.n	8004238 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <xTaskCheckForTimeOut+0xc8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d00a      	beq.n	800420c <xTaskCheckForTimeOut+0x88>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d305      	bcc.n	800420c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e015      	b.n	8004238 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20b      	bcs.n	800422e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad2      	subs	r2, r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff98 	bl	8004158 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e004      	b.n	8004238 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004238:	f000 fcb4 	bl	8004ba4 <vPortExitCritical>

    return xReturn;
 800423c:	69fb      	ldr	r3, [r7, #28]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000308 	.word	0x20000308
 800424c:	2000031c 	.word	0x2000031c

08004250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <vTaskMissedYield+0x14>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	20000318 	.word	0x20000318

08004268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004270:	f000 f852 	bl	8004318 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <prvIdleTask+0x28>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d9f9      	bls.n	8004270 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <prvIdleTask+0x2c>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800428c:	e7f0      	b.n	8004270 <prvIdleTask+0x8>
 800428e:	bf00      	nop
 8004290:	20000230 	.word	0x20000230
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	e00c      	b.n	80042be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <prvInitialiseTaskLists+0x60>)
 80042b0:	4413      	add	r3, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fc82 	bl	8002bbc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3301      	adds	r3, #1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d9ef      	bls.n	80042a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80042c4:	480d      	ldr	r0, [pc, #52]	; (80042fc <prvInitialiseTaskLists+0x64>)
 80042c6:	f7fe fc79 	bl	8002bbc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80042ca:	480d      	ldr	r0, [pc, #52]	; (8004300 <prvInitialiseTaskLists+0x68>)
 80042cc:	f7fe fc76 	bl	8002bbc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80042d0:	480c      	ldr	r0, [pc, #48]	; (8004304 <prvInitialiseTaskLists+0x6c>)
 80042d2:	f7fe fc73 	bl	8002bbc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80042d6:	480c      	ldr	r0, [pc, #48]	; (8004308 <prvInitialiseTaskLists+0x70>)
 80042d8:	f7fe fc70 	bl	8002bbc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80042dc:	480b      	ldr	r0, [pc, #44]	; (800430c <prvInitialiseTaskLists+0x74>)
 80042de:	f7fe fc6d 	bl	8002bbc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <prvInitialiseTaskLists+0x78>)
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <prvInitialiseTaskLists+0x64>)
 80042e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <prvInitialiseTaskLists+0x7c>)
 80042ea:	4a05      	ldr	r2, [pc, #20]	; (8004300 <prvInitialiseTaskLists+0x68>)
 80042ec:	601a      	str	r2, [r3, #0]
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000230 	.word	0x20000230
 80042fc:	20000294 	.word	0x20000294
 8004300:	200002a8 	.word	0x200002a8
 8004304:	200002c4 	.word	0x200002c4
 8004308:	200002d8 	.word	0x200002d8
 800430c:	200002f0 	.word	0x200002f0
 8004310:	200002bc 	.word	0x200002bc
 8004314:	200002c0 	.word	0x200002c0

08004318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800431e:	e019      	b.n	8004354 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004320:	f000 fc10 	bl	8004b44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <prvCheckTasksWaitingTermination+0x50>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fca9 	bl	8002c88 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <prvCheckTasksWaitingTermination+0x54>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3b01      	subs	r3, #1
 800433c:	4a0b      	ldr	r2, [pc, #44]	; (800436c <prvCheckTasksWaitingTermination+0x54>)
 800433e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <prvCheckTasksWaitingTermination+0x58>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3b01      	subs	r3, #1
 8004346:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <prvCheckTasksWaitingTermination+0x58>)
 8004348:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800434a:	f000 fc2b 	bl	8004ba4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f810 	bl	8004374 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <prvCheckTasksWaitingTermination+0x58>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e1      	bne.n	8004320 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200002d8 	.word	0x200002d8
 800436c:	20000304 	.word	0x20000304
 8004370:	200002ec 	.word	0x200002ec

08004374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fda3 	bl	8004ecc <vPortFree>
                vPortFree( pxTCB );
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fda0 	bl	8004ecc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <prvResetNextTaskUnblockTime+0x30>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <prvResetNextTaskUnblockTime+0x34>)
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80043aa:	e005      	b.n	80043b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <prvResetNextTaskUnblockTime+0x30>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <prvResetNextTaskUnblockTime+0x34>)
 80043b6:	6013      	str	r3, [r2, #0]
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	200002bc 	.word	0x200002bc
 80043c8:	20000324 	.word	0x20000324

080043cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04a      	beq.n	8004478 <xTaskPriorityInherit+0xac>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <xTaskPriorityInherit+0xb8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d23a      	bcs.n	8004466 <xTaskPriorityInherit+0x9a>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db06      	blt.n	8004406 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f8:	4b22      	ldr	r3, [pc, #136]	; (8004484 <xTaskPriorityInherit+0xb8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f1c3 0205 	rsb	r2, r3, #5
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6959      	ldr	r1, [r3, #20]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <xTaskPriorityInherit+0xbc>)
 8004418:	4413      	add	r3, r2
 800441a:	4299      	cmp	r1, r3
 800441c:	d11b      	bne.n	8004456 <xTaskPriorityInherit+0x8a>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3304      	adds	r3, #4
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fc30 	bl	8002c88 <uxListRemove>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	2201      	movs	r2, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43da      	mvns	r2, r3
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <xTaskPriorityInherit+0xc0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4013      	ands	r3, r2
 8004440:	4a12      	ldr	r2, [pc, #72]	; (800448c <xTaskPriorityInherit+0xc0>)
 8004442:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <xTaskPriorityInherit+0xb8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7fc f8a0 	bl	8000594 <prvReaddTaskToReadyList>
 8004454:	e004      	b.n	8004460 <xTaskPriorityInherit+0x94>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <xTaskPriorityInherit+0xb8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e008      	b.n	8004478 <xTaskPriorityInherit+0xac>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <xTaskPriorityInherit+0xb8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d201      	bcs.n	8004478 <xTaskPriorityInherit+0xac>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004478:	68fb      	ldr	r3, [r7, #12]
    }
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000022c 	.word	0x2000022c
 8004488:	20000230 	.word	0x20000230
 800448c:	2000030c 	.word	0x2000030c

08004490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d04f      	beq.n	8004546 <xTaskPriorityDisinherit+0xb6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <xTaskPriorityDisinherit+0xc0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d00a      	beq.n	80044c6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
    }
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
    }
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d025      	beq.n	8004546 <xTaskPriorityDisinherit+0xb6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d121      	bne.n	8004546 <xTaskPriorityDisinherit+0xb6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fbbe 	bl	8002c88 <uxListRemove>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	2201      	movs	r2, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43da      	mvns	r2, r3
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <xTaskPriorityDisinherit+0xc4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4013      	ands	r3, r2
 8004524:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <xTaskPriorityDisinherit+0xc4>)
 8004526:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f1c3 0205 	rsb	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800453c:	6938      	ldr	r0, [r7, #16]
 800453e:	f7fc f829 	bl	8000594 <prvReaddTaskToReadyList>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004546:	697b      	ldr	r3, [r7, #20]
    }
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	2000022c 	.word	0x2000022c
 8004554:	2000030c 	.word	0x2000030c

08004558 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a1 	beq.w	80046b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	613b      	str	r3, [r7, #16]
    }
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d902      	bls.n	80045a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	e002      	b.n	80045a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	429a      	cmp	r2, r3
 80045ae:	f000 8081 	beq.w	80046b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d17b      	bne.n	80046b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10a      	bne.n	80045dc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60fb      	str	r3, [r7, #12]
    }
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	db04      	blt.n	80045fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	f1c3 0205 	rsb	r2, r3, #5
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	6959      	ldr	r1, [r3, #20]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4a2d      	ldr	r2, [pc, #180]	; (80046c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800460a:	4413      	add	r3, r2
 800460c:	4299      	cmp	r1, r3
 800460e:	d151      	bne.n	80046b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	3304      	adds	r3, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fb37 	bl	8002c88 <uxListRemove>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2201      	movs	r2, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43da      	mvns	r2, r3
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4013      	ands	r3, r2
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004634:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	2201      	movs	r2, #1
 800463c:	409a      	lsls	r2, r3
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4313      	orrs	r3, r2
 8004644:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	491c      	ldr	r1, [pc, #112]	; (80046c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3304      	adds	r3, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	3204      	adds	r2, #4
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800468c:	441a      	add	r2, r3
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	615a      	str	r2, [r3, #20]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1c59      	adds	r1, r3, #1
 80046a6:	4806      	ldr	r0, [pc, #24]	; (80046c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4403      	add	r3, r0
 80046b2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80046b4:	bf00      	nop
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	2000022c 	.word	0x2000022c
 80046c0:	20000230 	.word	0x20000230
 80046c4:	2000030c 	.word	0x2000030c

080046c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80046cc:	4b07      	ldr	r3, [pc, #28]	; (80046ec <pvTaskIncrementMutexHeldCount+0x24>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <pvTaskIncrementMutexHeldCount+0x24>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046da:	3201      	adds	r2, #1
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <pvTaskIncrementMutexHeldCount+0x24>)
 80046e0:	681b      	ldr	r3, [r3, #0]
    }
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	2000022c 	.word	0x2000022c

080046f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046fa:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fabe 	bl	8002c88 <uxListRemove>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	2201      	movs	r2, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <prvAddCurrentTaskToDelayedList+0xec>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4013      	ands	r3, r2
 8004726:	4a2d      	ldr	r2, [pc, #180]	; (80047dc <prvAddCurrentTaskToDelayedList+0xec>)
 8004728:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d124      	bne.n	800477c <prvAddCurrentTaskToDelayedList+0x8c>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d021      	beq.n	800477c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	6892      	ldr	r2, [r2, #8]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	3204      	adds	r2, #4
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800476c:	615a      	str	r2, [r3, #20]
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800477a:	e026      	b.n	80047ca <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	d209      	bcs.n	80047a8 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7fe fa38 	bl	8002c16 <vListInsert>
}
 80047a6:	e010      	b.n	80047ca <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <prvAddCurrentTaskToDelayedList+0xf8>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fe fa2e 	bl	8002c16 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d202      	bcs.n	80047ca <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6013      	str	r3, [r2, #0]
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000308 	.word	0x20000308
 80047d8:	2000022c 	.word	0x2000022c
 80047dc:	2000030c 	.word	0x2000030c
 80047e0:	200002f0 	.word	0x200002f0
 80047e4:	200002c0 	.word	0x200002c0
 80047e8:	200002bc 	.word	0x200002bc
 80047ec:	20000324 	.word	0x20000324

080047f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3b04      	subs	r3, #4
 8004800:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004808:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b04      	subs	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f023 0201 	bic.w	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b04      	subs	r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <pxPortInitialiseStack+0x64>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3b14      	subs	r3, #20
 800482a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3b04      	subs	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f06f 0202 	mvn.w	r2, #2
 800483e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b20      	subs	r3, #32
 8004844:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	08004859 	.word	0x08004859

08004858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <prvTaskExitError+0x54>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d00a      	beq.n	8004882 <prvTaskExitError+0x2a>
        __asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60fb      	str	r3, [r7, #12]
    }
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <prvTaskExitError+0x28>
        __asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60bb      	str	r3, [r7, #8]
    }
 8004894:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004896:	bf00      	nop
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0fc      	beq.n	8004898 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000010 	.word	0x20000010

080048b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <pxCurrentTCBConst2>)
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	6808      	ldr	r0, [r1, #0]
 80048b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ba:	f380 8809 	msr	PSP, r0
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8811 	msr	BASEPRI, r0
 80048ca:	4770      	bx	lr
 80048cc:	f3af 8000 	nop.w

080048d0 <pxCurrentTCBConst2>:
 80048d0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80048d8:	4808      	ldr	r0, [pc, #32]	; (80048fc <prvPortStartFirstTask+0x24>)
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	6800      	ldr	r0, [r0, #0]
 80048de:	f380 8808 	msr	MSP, r0
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8814 	msr	CONTROL, r0
 80048ea:	b662      	cpsie	i
 80048ec:	b661      	cpsie	f
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	df00      	svc	0
 80048f8:	bf00      	nop
 80048fa:	0000      	.short	0x0000
 80048fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop

08004904 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800490a:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <xPortStartScheduler+0x120>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a46      	ldr	r2, [pc, #280]	; (8004a28 <xPortStartScheduler+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10a      	bne.n	800492a <xPortStartScheduler+0x26>
        __asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	613b      	str	r3, [r7, #16]
    }
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800492a:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <xPortStartScheduler+0x120>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3f      	ldr	r2, [pc, #252]	; (8004a2c <xPortStartScheduler+0x128>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10a      	bne.n	800494a <xPortStartScheduler+0x46>
        __asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60fb      	str	r3, [r7, #12]
    }
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800494a:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <xPortStartScheduler+0x12c>)
 800494c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <xPortStartScheduler+0x130>)
 8004970:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004972:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <xPortStartScheduler+0x134>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004978:	e009      	b.n	800498e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800497a:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <xPortStartScheduler+0x134>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3b01      	subs	r3, #1
 8004980:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <xPortStartScheduler+0x134>)
 8004982:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d0ef      	beq.n	800497a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <xPortStartScheduler+0x134>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1c3 0307 	rsb	r3, r3, #7
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d00a      	beq.n	80049bc <xPortStartScheduler+0xb8>
        __asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
    }
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <xPortStartScheduler+0x134>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <xPortStartScheduler+0x134>)
 80049c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <xPortStartScheduler+0x134>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <xPortStartScheduler+0x134>)
 80049d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <xPortStartScheduler+0x138>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <xPortStartScheduler+0x138>)
 80049e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <xPortStartScheduler+0x138>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <xPortStartScheduler+0x138>)
 80049ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049f2:	f000 f95b 	bl	8004cac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <xPortStartScheduler+0x13c>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049fc:	f000 f97a 	bl	8004cf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a00:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <xPortStartScheduler+0x140>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0f      	ldr	r2, [pc, #60]	; (8004a44 <xPortStartScheduler+0x140>)
 8004a06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a0c:	f7ff ff64 	bl	80048d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a10:	f7ff fa4c 	bl	8003eac <vTaskSwitchContext>
    prvTaskExitError();
 8004a14:	f7ff ff20 	bl	8004858 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed00 	.word	0xe000ed00
 8004a28:	410fc271 	.word	0x410fc271
 8004a2c:	410fc270 	.word	0x410fc270
 8004a30:	e000e400 	.word	0xe000e400
 8004a34:	20000330 	.word	0x20000330
 8004a38:	20000334 	.word	0x20000334
 8004a3c:	e000ed20 	.word	0xe000ed20
 8004a40:	20000010 	.word	0x20000010
 8004a44:	e000ef34 	.word	0xe000ef34

08004a48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <vInitPrioGroupValue+0xe4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a37      	ldr	r2, [pc, #220]	; (8004b30 <vInitPrioGroupValue+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10a      	bne.n	8004a6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	613b      	str	r3, [r7, #16]
    }
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a6e:	4b2f      	ldr	r3, [pc, #188]	; (8004b2c <vInitPrioGroupValue+0xe4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a30      	ldr	r2, [pc, #192]	; (8004b34 <vInitPrioGroupValue+0xec>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10a      	bne.n	8004a8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
    }
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <vInitPrioGroupValue+0xf0>)
 8004a90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <vInitPrioGroupValue+0xf4>)
 8004ab4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abc:	e009      	b.n	8004ad2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004ac6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d0ef      	beq.n	8004abe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d00a      	beq.n	8004b00 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004b08:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b12:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <vInitPrioGroupValue+0xf8>)
 8004b14:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000ed00 	.word	0xe000ed00
 8004b30:	410fc271 	.word	0x410fc271
 8004b34:	410fc270 	.word	0x410fc270
 8004b38:	e000e400 	.word	0xe000e400
 8004b3c:	20000330 	.word	0x20000330
 8004b40:	20000334 	.word	0x20000334

08004b44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
        __asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	607b      	str	r3, [r7, #4]
    }
 8004b5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <vPortEnterCritical+0x58>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <vPortEnterCritical+0x58>)
 8004b66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <vPortEnterCritical+0x58>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10f      	bne.n	8004b90 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <vPortEnterCritical+0x5c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <vPortEnterCritical+0x4c>
        __asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	603b      	str	r3, [r7, #0]
    }
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <vPortEnterCritical+0x4a>
    }
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000010 	.word	0x20000010
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <vPortExitCritical+0x24>
        __asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	607b      	str	r3, [r7, #4]
    }
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bd0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <vPortExitCritical+0x42>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004be4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000010 	.word	0x20000010
	...

08004c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c00:	f3ef 8009 	mrs	r0, PSP
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <pxCurrentTCBConst>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f01e 0f10 	tst.w	lr, #16
 8004c10:	bf08      	it	eq
 8004c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	6010      	str	r0, [r2, #0]
 8004c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c24:	f380 8811 	msr	BASEPRI, r0
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f7ff f93c 	bl	8003eac <vTaskSwitchContext>
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	bc09      	pop	{r0, r3}
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c46:	f01e 0f10 	tst.w	lr, #16
 8004c4a:	bf08      	it	eq
 8004c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c50:	f380 8809 	msr	PSP, r0
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst>:
 8004c60:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
    }
 8004c80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7fe fffd 	bl	8003c80 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <SysTick_Handler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
    }
 8004c9e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <vPortSetupTimerInterrupt+0x44>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010
 8004ce4:	e000e018 	.word	0xe000e018
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	10624dd3 	.word	0x10624dd3
 8004cf0:	e000e014 	.word	0xe000e014

08004cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d04 <vPortEnableVFP+0x10>
 8004cf8:	6801      	ldr	r1, [r0, #0]
 8004cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cfe:	6001      	str	r1, [r0, #0]
 8004d00:	4770      	bx	lr
 8004d02:	0000      	.short	0x0000
 8004d04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop

08004d0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004d18:	f7fe fea8 	bl	8003a6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d1c:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <pvPortMalloc+0x1a8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d24:	f000 f934 	bl	8004f90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d28:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <pvPortMalloc+0x1ac>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 80a7 	bne.w	8004e84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02d      	beq.n	8004d98 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d227      	bcs.n	8004d98 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004d48:	2208      	movs	r2, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d021      	beq.n	8004d9e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	3308      	adds	r3, #8
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d214      	bcs.n	8004d92 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	3308      	adds	r3, #8
 8004d70:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <pvPortMalloc+0x92>
        __asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	617b      	str	r3, [r7, #20]
    }
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d96:	e002      	b.n	8004d9e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	e000      	b.n	8004da0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d9e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d06e      	beq.n	8004e84 <pvPortMalloc+0x178>
 8004da6:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d869      	bhi.n	8004e84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004db0:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <pvPortMalloc+0x1b4>)
 8004db2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004db4:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <pvPortMalloc+0x1b4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dba:	e004      	b.n	8004dc6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d903      	bls.n	8004dd8 <pvPortMalloc+0xcc>
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f1      	bne.n	8004dbc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <pvPortMalloc+0x1a8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d050      	beq.n	8004e84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2208      	movs	r2, #8
 8004de8:	4413      	add	r3, r2
 8004dea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d91f      	bls.n	8004e44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <pvPortMalloc+0x120>
        __asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	613b      	str	r3, [r7, #16]
    }
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e3e:	69b8      	ldr	r0, [r7, #24]
 8004e40:	f000 f908 	bl	8005054 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <pvPortMalloc+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d203      	bcs.n	8004e66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <pvPortMalloc+0x1b0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <pvPortMalloc+0x1b8>)
 8004e64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <pvPortMalloc+0x1ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004e7a:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <pvPortMalloc+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <pvPortMalloc+0x1bc>)
 8004e82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004e84:	f7fe fe00 	bl	8003a88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <pvPortMalloc+0x19c>
        __asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
    }
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20012f40 	.word	0x20012f40
 8004eb8:	20012f54 	.word	0x20012f54
 8004ebc:	20012f44 	.word	0x20012f44
 8004ec0:	20012f38 	.word	0x20012f38
 8004ec4:	20012f48 	.word	0x20012f48
 8004ec8:	20012f4c 	.word	0x20012f4c

08004ecc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d04d      	beq.n	8004f7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ede:	2308      	movs	r3, #8
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <vPortFree+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <vPortFree+0x44>
        __asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60fb      	str	r3, [r7, #12]
    }
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <vPortFree+0x62>
        __asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60bb      	str	r3, [r7, #8]
    }
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <vPortFree+0xb8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01e      	beq.n	8004f7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11a      	bne.n	8004f7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <vPortFree+0xb8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	401a      	ands	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004f54:	f7fe fd8a 	bl	8003a6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortFree+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <vPortFree+0xbc>)
 8004f64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f66:	6938      	ldr	r0, [r7, #16]
 8004f68:	f000 f874 	bl	8005054 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <vPortFree+0xc0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <vPortFree+0xc0>)
 8004f74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004f76:	f7fe fd87 	bl	8003a88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20012f54 	.word	0x20012f54
 8004f88:	20012f44 	.word	0x20012f44
 8004f8c:	20012f50 	.word	0x20012f50

08004f90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004f9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <prvHeapInit+0xac>)
 8004f9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3307      	adds	r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0307 	bic.w	r3, r3, #7
 8004fb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	4a1f      	ldr	r2, [pc, #124]	; (800503c <prvHeapInit+0xac>)
 8004fc0:	4413      	add	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <prvHeapInit+0xb0>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <prvHeapInit+0xb0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4413      	add	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004fdc:	2208      	movs	r2, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a15      	ldr	r2, [pc, #84]	; (8005044 <prvHeapInit+0xb4>)
 8004ff0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <prvHeapInit+0xb4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <prvHeapInit+0xb4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <prvHeapInit+0xb4>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <prvHeapInit+0xb8>)
 800501e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a09      	ldr	r2, [pc, #36]	; (800504c <prvHeapInit+0xbc>)
 8005026:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <prvHeapInit+0xc0>)
 800502a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000338 	.word	0x20000338
 8005040:	20012f38 	.word	0x20012f38
 8005044:	20012f40 	.word	0x20012f40
 8005048:	20012f48 	.word	0x20012f48
 800504c:	20012f44 	.word	0x20012f44
 8005050:	20012f54 	.word	0x20012f54

08005054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <prvInsertBlockIntoFreeList+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e002      	b.n	8005068 <prvInsertBlockIntoFreeList+0x14>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d8f7      	bhi.n	8005062 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d108      	bne.n	8005096 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	441a      	add	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d118      	bne.n	80050dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <prvInsertBlockIntoFreeList+0xb0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d00d      	beq.n	80050d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e008      	b.n	80050e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <prvInsertBlockIntoFreeList+0xb0>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e003      	b.n	80050e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d002      	beq.n	80050f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20012f38 	.word	0x20012f38
 8005104:	20012f40 	.word	0x20012f40

08005108 <__errno>:
 8005108:	4b01      	ldr	r3, [pc, #4]	; (8005110 <__errno+0x8>)
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000014 	.word	0x20000014

08005114 <__libc_init_array>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	4d0d      	ldr	r5, [pc, #52]	; (800514c <__libc_init_array+0x38>)
 8005118:	4c0d      	ldr	r4, [pc, #52]	; (8005150 <__libc_init_array+0x3c>)
 800511a:	1b64      	subs	r4, r4, r5
 800511c:	10a4      	asrs	r4, r4, #2
 800511e:	2600      	movs	r6, #0
 8005120:	42a6      	cmp	r6, r4
 8005122:	d109      	bne.n	8005138 <__libc_init_array+0x24>
 8005124:	4d0b      	ldr	r5, [pc, #44]	; (8005154 <__libc_init_array+0x40>)
 8005126:	4c0c      	ldr	r4, [pc, #48]	; (8005158 <__libc_init_array+0x44>)
 8005128:	f001 fa34 	bl	8006594 <_init>
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	2600      	movs	r6, #0
 8005132:	42a6      	cmp	r6, r4
 8005134:	d105      	bne.n	8005142 <__libc_init_array+0x2e>
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	f855 3b04 	ldr.w	r3, [r5], #4
 800513c:	4798      	blx	r3
 800513e:	3601      	adds	r6, #1
 8005140:	e7ee      	b.n	8005120 <__libc_init_array+0xc>
 8005142:	f855 3b04 	ldr.w	r3, [r5], #4
 8005146:	4798      	blx	r3
 8005148:	3601      	adds	r6, #1
 800514a:	e7f2      	b.n	8005132 <__libc_init_array+0x1e>
 800514c:	08006804 	.word	0x08006804
 8005150:	08006804 	.word	0x08006804
 8005154:	08006804 	.word	0x08006804
 8005158:	08006808 	.word	0x08006808

0800515c <memcpy>:
 800515c:	440a      	add	r2, r1
 800515e:	4291      	cmp	r1, r2
 8005160:	f100 33ff 	add.w	r3, r0, #4294967295
 8005164:	d100      	bne.n	8005168 <memcpy+0xc>
 8005166:	4770      	bx	lr
 8005168:	b510      	push	{r4, lr}
 800516a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800516e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005172:	4291      	cmp	r1, r2
 8005174:	d1f9      	bne.n	800516a <memcpy+0xe>
 8005176:	bd10      	pop	{r4, pc}

08005178 <memset>:
 8005178:	4402      	add	r2, r0
 800517a:	4603      	mov	r3, r0
 800517c:	4293      	cmp	r3, r2
 800517e:	d100      	bne.n	8005182 <memset+0xa>
 8005180:	4770      	bx	lr
 8005182:	f803 1b01 	strb.w	r1, [r3], #1
 8005186:	e7f9      	b.n	800517c <memset+0x4>

08005188 <rand>:
 8005188:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <rand+0x5c>)
 800518a:	b510      	push	{r4, lr}
 800518c:	681c      	ldr	r4, [r3, #0]
 800518e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005190:	b9b3      	cbnz	r3, 80051c0 <rand+0x38>
 8005192:	2018      	movs	r0, #24
 8005194:	f000 f886 	bl	80052a4 <malloc>
 8005198:	63a0      	str	r0, [r4, #56]	; 0x38
 800519a:	b928      	cbnz	r0, 80051a8 <rand+0x20>
 800519c:	4602      	mov	r2, r0
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <rand+0x60>)
 80051a0:	4812      	ldr	r0, [pc, #72]	; (80051ec <rand+0x64>)
 80051a2:	214e      	movs	r1, #78	; 0x4e
 80051a4:	f000 f84e 	bl	8005244 <__assert_func>
 80051a8:	4a11      	ldr	r2, [pc, #68]	; (80051f0 <rand+0x68>)
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <rand+0x6c>)
 80051ac:	e9c0 2300 	strd	r2, r3, [r0]
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <rand+0x70>)
 80051b2:	6083      	str	r3, [r0, #8]
 80051b4:	230b      	movs	r3, #11
 80051b6:	8183      	strh	r3, [r0, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	2300      	movs	r3, #0
 80051bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80051c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80051c2:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <rand+0x74>)
 80051c4:	6920      	ldr	r0, [r4, #16]
 80051c6:	6963      	ldr	r3, [r4, #20]
 80051c8:	490d      	ldr	r1, [pc, #52]	; (8005200 <rand+0x78>)
 80051ca:	4342      	muls	r2, r0
 80051cc:	fb01 2203 	mla	r2, r1, r3, r2
 80051d0:	fba0 0101 	umull	r0, r1, r0, r1
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	eb42 0001 	adc.w	r0, r2, r1
 80051da:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80051de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80051e2:	bd10      	pop	{r4, pc}
 80051e4:	20000014 	.word	0x20000014
 80051e8:	080066b8 	.word	0x080066b8
 80051ec:	080066cf 	.word	0x080066cf
 80051f0:	abcd330e 	.word	0xabcd330e
 80051f4:	e66d1234 	.word	0xe66d1234
 80051f8:	0005deec 	.word	0x0005deec
 80051fc:	5851f42d 	.word	0x5851f42d
 8005200:	4c957f2d 	.word	0x4c957f2d

08005204 <siprintf>:
 8005204:	b40e      	push	{r1, r2, r3}
 8005206:	b500      	push	{lr}
 8005208:	b09c      	sub	sp, #112	; 0x70
 800520a:	ab1d      	add	r3, sp, #116	; 0x74
 800520c:	9002      	str	r0, [sp, #8]
 800520e:	9006      	str	r0, [sp, #24]
 8005210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005214:	4809      	ldr	r0, [pc, #36]	; (800523c <siprintf+0x38>)
 8005216:	9107      	str	r1, [sp, #28]
 8005218:	9104      	str	r1, [sp, #16]
 800521a:	4909      	ldr	r1, [pc, #36]	; (8005240 <siprintf+0x3c>)
 800521c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005220:	9105      	str	r1, [sp, #20]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	a902      	add	r1, sp, #8
 8005228:	f000 f980 	bl	800552c <_svfiprintf_r>
 800522c:	9b02      	ldr	r3, [sp, #8]
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	b01c      	add	sp, #112	; 0x70
 8005234:	f85d eb04 	ldr.w	lr, [sp], #4
 8005238:	b003      	add	sp, #12
 800523a:	4770      	bx	lr
 800523c:	20000014 	.word	0x20000014
 8005240:	ffff0208 	.word	0xffff0208

08005244 <__assert_func>:
 8005244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005246:	4614      	mov	r4, r2
 8005248:	461a      	mov	r2, r3
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <__assert_func+0x2c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4605      	mov	r5, r0
 8005250:	68d8      	ldr	r0, [r3, #12]
 8005252:	b14c      	cbz	r4, 8005268 <__assert_func+0x24>
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <__assert_func+0x30>)
 8005256:	9100      	str	r1, [sp, #0]
 8005258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800525c:	4906      	ldr	r1, [pc, #24]	; (8005278 <__assert_func+0x34>)
 800525e:	462b      	mov	r3, r5
 8005260:	f000 f80e 	bl	8005280 <fiprintf>
 8005264:	f000 fe20 	bl	8005ea8 <abort>
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <__assert_func+0x38>)
 800526a:	461c      	mov	r4, r3
 800526c:	e7f3      	b.n	8005256 <__assert_func+0x12>
 800526e:	bf00      	nop
 8005270:	20000014 	.word	0x20000014
 8005274:	0800672a 	.word	0x0800672a
 8005278:	08006737 	.word	0x08006737
 800527c:	08006765 	.word	0x08006765

08005280 <fiprintf>:
 8005280:	b40e      	push	{r1, r2, r3}
 8005282:	b503      	push	{r0, r1, lr}
 8005284:	4601      	mov	r1, r0
 8005286:	ab03      	add	r3, sp, #12
 8005288:	4805      	ldr	r0, [pc, #20]	; (80052a0 <fiprintf+0x20>)
 800528a:	f853 2b04 	ldr.w	r2, [r3], #4
 800528e:	6800      	ldr	r0, [r0, #0]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	f000 fa75 	bl	8005780 <_vfiprintf_r>
 8005296:	b002      	add	sp, #8
 8005298:	f85d eb04 	ldr.w	lr, [sp], #4
 800529c:	b003      	add	sp, #12
 800529e:	4770      	bx	lr
 80052a0:	20000014 	.word	0x20000014

080052a4 <malloc>:
 80052a4:	4b02      	ldr	r3, [pc, #8]	; (80052b0 <malloc+0xc>)
 80052a6:	4601      	mov	r1, r0
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f000 b86f 	b.w	800538c <_malloc_r>
 80052ae:	bf00      	nop
 80052b0:	20000014 	.word	0x20000014

080052b4 <_free_r>:
 80052b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b6:	2900      	cmp	r1, #0
 80052b8:	d044      	beq.n	8005344 <_free_r+0x90>
 80052ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052be:	9001      	str	r0, [sp, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f1a1 0404 	sub.w	r4, r1, #4
 80052c6:	bfb8      	it	lt
 80052c8:	18e4      	addlt	r4, r4, r3
 80052ca:	f001 f82f 	bl	800632c <__malloc_lock>
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <_free_r+0x94>)
 80052d0:	9801      	ldr	r0, [sp, #4]
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	b933      	cbnz	r3, 80052e4 <_free_r+0x30>
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	6014      	str	r4, [r2, #0]
 80052da:	b003      	add	sp, #12
 80052dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e0:	f001 b82a 	b.w	8006338 <__malloc_unlock>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d908      	bls.n	80052fa <_free_r+0x46>
 80052e8:	6825      	ldr	r5, [r4, #0]
 80052ea:	1961      	adds	r1, r4, r5
 80052ec:	428b      	cmp	r3, r1
 80052ee:	bf01      	itttt	eq
 80052f0:	6819      	ldreq	r1, [r3, #0]
 80052f2:	685b      	ldreq	r3, [r3, #4]
 80052f4:	1949      	addeq	r1, r1, r5
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	e7ed      	b.n	80052d6 <_free_r+0x22>
 80052fa:	461a      	mov	r2, r3
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b10b      	cbz	r3, 8005304 <_free_r+0x50>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d9fa      	bls.n	80052fa <_free_r+0x46>
 8005304:	6811      	ldr	r1, [r2, #0]
 8005306:	1855      	adds	r5, r2, r1
 8005308:	42a5      	cmp	r5, r4
 800530a:	d10b      	bne.n	8005324 <_free_r+0x70>
 800530c:	6824      	ldr	r4, [r4, #0]
 800530e:	4421      	add	r1, r4
 8005310:	1854      	adds	r4, r2, r1
 8005312:	42a3      	cmp	r3, r4
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	d1e0      	bne.n	80052da <_free_r+0x26>
 8005318:	681c      	ldr	r4, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	6053      	str	r3, [r2, #4]
 800531e:	4421      	add	r1, r4
 8005320:	6011      	str	r1, [r2, #0]
 8005322:	e7da      	b.n	80052da <_free_r+0x26>
 8005324:	d902      	bls.n	800532c <_free_r+0x78>
 8005326:	230c      	movs	r3, #12
 8005328:	6003      	str	r3, [r0, #0]
 800532a:	e7d6      	b.n	80052da <_free_r+0x26>
 800532c:	6825      	ldr	r5, [r4, #0]
 800532e:	1961      	adds	r1, r4, r5
 8005330:	428b      	cmp	r3, r1
 8005332:	bf04      	itt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	6063      	str	r3, [r4, #4]
 800533a:	bf04      	itt	eq
 800533c:	1949      	addeq	r1, r1, r5
 800533e:	6021      	streq	r1, [r4, #0]
 8005340:	6054      	str	r4, [r2, #4]
 8005342:	e7ca      	b.n	80052da <_free_r+0x26>
 8005344:	b003      	add	sp, #12
 8005346:	bd30      	pop	{r4, r5, pc}
 8005348:	20012f58 	.word	0x20012f58

0800534c <sbrk_aligned>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4e0e      	ldr	r6, [pc, #56]	; (8005388 <sbrk_aligned+0x3c>)
 8005350:	460c      	mov	r4, r1
 8005352:	6831      	ldr	r1, [r6, #0]
 8005354:	4605      	mov	r5, r0
 8005356:	b911      	cbnz	r1, 800535e <sbrk_aligned+0x12>
 8005358:	f000 fcd6 	bl	8005d08 <_sbrk_r>
 800535c:	6030      	str	r0, [r6, #0]
 800535e:	4621      	mov	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f000 fcd1 	bl	8005d08 <_sbrk_r>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d00a      	beq.n	8005380 <sbrk_aligned+0x34>
 800536a:	1cc4      	adds	r4, r0, #3
 800536c:	f024 0403 	bic.w	r4, r4, #3
 8005370:	42a0      	cmp	r0, r4
 8005372:	d007      	beq.n	8005384 <sbrk_aligned+0x38>
 8005374:	1a21      	subs	r1, r4, r0
 8005376:	4628      	mov	r0, r5
 8005378:	f000 fcc6 	bl	8005d08 <_sbrk_r>
 800537c:	3001      	adds	r0, #1
 800537e:	d101      	bne.n	8005384 <sbrk_aligned+0x38>
 8005380:	f04f 34ff 	mov.w	r4, #4294967295
 8005384:	4620      	mov	r0, r4
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	20012f5c 	.word	0x20012f5c

0800538c <_malloc_r>:
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	1ccd      	adds	r5, r1, #3
 8005392:	f025 0503 	bic.w	r5, r5, #3
 8005396:	3508      	adds	r5, #8
 8005398:	2d0c      	cmp	r5, #12
 800539a:	bf38      	it	cc
 800539c:	250c      	movcc	r5, #12
 800539e:	2d00      	cmp	r5, #0
 80053a0:	4607      	mov	r7, r0
 80053a2:	db01      	blt.n	80053a8 <_malloc_r+0x1c>
 80053a4:	42a9      	cmp	r1, r5
 80053a6:	d905      	bls.n	80053b4 <_malloc_r+0x28>
 80053a8:	230c      	movs	r3, #12
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	2600      	movs	r6, #0
 80053ae:	4630      	mov	r0, r6
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b4:	4e2e      	ldr	r6, [pc, #184]	; (8005470 <_malloc_r+0xe4>)
 80053b6:	f000 ffb9 	bl	800632c <__malloc_lock>
 80053ba:	6833      	ldr	r3, [r6, #0]
 80053bc:	461c      	mov	r4, r3
 80053be:	bb34      	cbnz	r4, 800540e <_malloc_r+0x82>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	f7ff ffc2 	bl	800534c <sbrk_aligned>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	4604      	mov	r4, r0
 80053cc:	d14d      	bne.n	800546a <_malloc_r+0xde>
 80053ce:	6834      	ldr	r4, [r6, #0]
 80053d0:	4626      	mov	r6, r4
 80053d2:	2e00      	cmp	r6, #0
 80053d4:	d140      	bne.n	8005458 <_malloc_r+0xcc>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	4631      	mov	r1, r6
 80053da:	4638      	mov	r0, r7
 80053dc:	eb04 0803 	add.w	r8, r4, r3
 80053e0:	f000 fc92 	bl	8005d08 <_sbrk_r>
 80053e4:	4580      	cmp	r8, r0
 80053e6:	d13a      	bne.n	800545e <_malloc_r+0xd2>
 80053e8:	6821      	ldr	r1, [r4, #0]
 80053ea:	3503      	adds	r5, #3
 80053ec:	1a6d      	subs	r5, r5, r1
 80053ee:	f025 0503 	bic.w	r5, r5, #3
 80053f2:	3508      	adds	r5, #8
 80053f4:	2d0c      	cmp	r5, #12
 80053f6:	bf38      	it	cc
 80053f8:	250c      	movcc	r5, #12
 80053fa:	4629      	mov	r1, r5
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff ffa5 	bl	800534c <sbrk_aligned>
 8005402:	3001      	adds	r0, #1
 8005404:	d02b      	beq.n	800545e <_malloc_r+0xd2>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	442b      	add	r3, r5
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	e00e      	b.n	800542c <_malloc_r+0xa0>
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	1b52      	subs	r2, r2, r5
 8005412:	d41e      	bmi.n	8005452 <_malloc_r+0xc6>
 8005414:	2a0b      	cmp	r2, #11
 8005416:	d916      	bls.n	8005446 <_malloc_r+0xba>
 8005418:	1961      	adds	r1, r4, r5
 800541a:	42a3      	cmp	r3, r4
 800541c:	6025      	str	r5, [r4, #0]
 800541e:	bf18      	it	ne
 8005420:	6059      	strne	r1, [r3, #4]
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	bf08      	it	eq
 8005426:	6031      	streq	r1, [r6, #0]
 8005428:	5162      	str	r2, [r4, r5]
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	4638      	mov	r0, r7
 800542e:	f104 060b 	add.w	r6, r4, #11
 8005432:	f000 ff81 	bl	8006338 <__malloc_unlock>
 8005436:	f026 0607 	bic.w	r6, r6, #7
 800543a:	1d23      	adds	r3, r4, #4
 800543c:	1af2      	subs	r2, r6, r3
 800543e:	d0b6      	beq.n	80053ae <_malloc_r+0x22>
 8005440:	1b9b      	subs	r3, r3, r6
 8005442:	50a3      	str	r3, [r4, r2]
 8005444:	e7b3      	b.n	80053ae <_malloc_r+0x22>
 8005446:	6862      	ldr	r2, [r4, #4]
 8005448:	42a3      	cmp	r3, r4
 800544a:	bf0c      	ite	eq
 800544c:	6032      	streq	r2, [r6, #0]
 800544e:	605a      	strne	r2, [r3, #4]
 8005450:	e7ec      	b.n	800542c <_malloc_r+0xa0>
 8005452:	4623      	mov	r3, r4
 8005454:	6864      	ldr	r4, [r4, #4]
 8005456:	e7b2      	b.n	80053be <_malloc_r+0x32>
 8005458:	4634      	mov	r4, r6
 800545a:	6876      	ldr	r6, [r6, #4]
 800545c:	e7b9      	b.n	80053d2 <_malloc_r+0x46>
 800545e:	230c      	movs	r3, #12
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4638      	mov	r0, r7
 8005464:	f000 ff68 	bl	8006338 <__malloc_unlock>
 8005468:	e7a1      	b.n	80053ae <_malloc_r+0x22>
 800546a:	6025      	str	r5, [r4, #0]
 800546c:	e7de      	b.n	800542c <_malloc_r+0xa0>
 800546e:	bf00      	nop
 8005470:	20012f58 	.word	0x20012f58

08005474 <__ssputs_r>:
 8005474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	688e      	ldr	r6, [r1, #8]
 800547a:	429e      	cmp	r6, r3
 800547c:	4682      	mov	sl, r0
 800547e:	460c      	mov	r4, r1
 8005480:	4690      	mov	r8, r2
 8005482:	461f      	mov	r7, r3
 8005484:	d838      	bhi.n	80054f8 <__ssputs_r+0x84>
 8005486:	898a      	ldrh	r2, [r1, #12]
 8005488:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800548c:	d032      	beq.n	80054f4 <__ssputs_r+0x80>
 800548e:	6825      	ldr	r5, [r4, #0]
 8005490:	6909      	ldr	r1, [r1, #16]
 8005492:	eba5 0901 	sub.w	r9, r5, r1
 8005496:	6965      	ldr	r5, [r4, #20]
 8005498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800549c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054a0:	3301      	adds	r3, #1
 80054a2:	444b      	add	r3, r9
 80054a4:	106d      	asrs	r5, r5, #1
 80054a6:	429d      	cmp	r5, r3
 80054a8:	bf38      	it	cc
 80054aa:	461d      	movcc	r5, r3
 80054ac:	0553      	lsls	r3, r2, #21
 80054ae:	d531      	bpl.n	8005514 <__ssputs_r+0xa0>
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7ff ff6b 	bl	800538c <_malloc_r>
 80054b6:	4606      	mov	r6, r0
 80054b8:	b950      	cbnz	r0, 80054d0 <__ssputs_r+0x5c>
 80054ba:	230c      	movs	r3, #12
 80054bc:	f8ca 3000 	str.w	r3, [sl]
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c6:	81a3      	strh	r3, [r4, #12]
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d0:	6921      	ldr	r1, [r4, #16]
 80054d2:	464a      	mov	r2, r9
 80054d4:	f7ff fe42 	bl	800515c <memcpy>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	6126      	str	r6, [r4, #16]
 80054e6:	6165      	str	r5, [r4, #20]
 80054e8:	444e      	add	r6, r9
 80054ea:	eba5 0509 	sub.w	r5, r5, r9
 80054ee:	6026      	str	r6, [r4, #0]
 80054f0:	60a5      	str	r5, [r4, #8]
 80054f2:	463e      	mov	r6, r7
 80054f4:	42be      	cmp	r6, r7
 80054f6:	d900      	bls.n	80054fa <__ssputs_r+0x86>
 80054f8:	463e      	mov	r6, r7
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	4632      	mov	r2, r6
 80054fe:	4641      	mov	r1, r8
 8005500:	f000 fefa 	bl	80062f8 <memmove>
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	1b9b      	subs	r3, r3, r6
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	4433      	add	r3, r6
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	2000      	movs	r0, #0
 8005512:	e7db      	b.n	80054cc <__ssputs_r+0x58>
 8005514:	462a      	mov	r2, r5
 8005516:	f000 ff15 	bl	8006344 <_realloc_r>
 800551a:	4606      	mov	r6, r0
 800551c:	2800      	cmp	r0, #0
 800551e:	d1e1      	bne.n	80054e4 <__ssputs_r+0x70>
 8005520:	6921      	ldr	r1, [r4, #16]
 8005522:	4650      	mov	r0, sl
 8005524:	f7ff fec6 	bl	80052b4 <_free_r>
 8005528:	e7c7      	b.n	80054ba <__ssputs_r+0x46>
	...

0800552c <_svfiprintf_r>:
 800552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	4698      	mov	r8, r3
 8005532:	898b      	ldrh	r3, [r1, #12]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	b09d      	sub	sp, #116	; 0x74
 8005538:	4607      	mov	r7, r0
 800553a:	460d      	mov	r5, r1
 800553c:	4614      	mov	r4, r2
 800553e:	d50e      	bpl.n	800555e <_svfiprintf_r+0x32>
 8005540:	690b      	ldr	r3, [r1, #16]
 8005542:	b963      	cbnz	r3, 800555e <_svfiprintf_r+0x32>
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	f7ff ff21 	bl	800538c <_malloc_r>
 800554a:	6028      	str	r0, [r5, #0]
 800554c:	6128      	str	r0, [r5, #16]
 800554e:	b920      	cbnz	r0, 800555a <_svfiprintf_r+0x2e>
 8005550:	230c      	movs	r3, #12
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e0d1      	b.n	80056fe <_svfiprintf_r+0x1d2>
 800555a:	2340      	movs	r3, #64	; 0x40
 800555c:	616b      	str	r3, [r5, #20]
 800555e:	2300      	movs	r3, #0
 8005560:	9309      	str	r3, [sp, #36]	; 0x24
 8005562:	2320      	movs	r3, #32
 8005564:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005568:	f8cd 800c 	str.w	r8, [sp, #12]
 800556c:	2330      	movs	r3, #48	; 0x30
 800556e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005718 <_svfiprintf_r+0x1ec>
 8005572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005576:	f04f 0901 	mov.w	r9, #1
 800557a:	4623      	mov	r3, r4
 800557c:	469a      	mov	sl, r3
 800557e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005582:	b10a      	cbz	r2, 8005588 <_svfiprintf_r+0x5c>
 8005584:	2a25      	cmp	r2, #37	; 0x25
 8005586:	d1f9      	bne.n	800557c <_svfiprintf_r+0x50>
 8005588:	ebba 0b04 	subs.w	fp, sl, r4
 800558c:	d00b      	beq.n	80055a6 <_svfiprintf_r+0x7a>
 800558e:	465b      	mov	r3, fp
 8005590:	4622      	mov	r2, r4
 8005592:	4629      	mov	r1, r5
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff ff6d 	bl	8005474 <__ssputs_r>
 800559a:	3001      	adds	r0, #1
 800559c:	f000 80aa 	beq.w	80056f4 <_svfiprintf_r+0x1c8>
 80055a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a2:	445a      	add	r2, fp
 80055a4:	9209      	str	r2, [sp, #36]	; 0x24
 80055a6:	f89a 3000 	ldrb.w	r3, [sl]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80a2 	beq.w	80056f4 <_svfiprintf_r+0x1c8>
 80055b0:	2300      	movs	r3, #0
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ba:	f10a 0a01 	add.w	sl, sl, #1
 80055be:	9304      	str	r3, [sp, #16]
 80055c0:	9307      	str	r3, [sp, #28]
 80055c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c6:	931a      	str	r3, [sp, #104]	; 0x68
 80055c8:	4654      	mov	r4, sl
 80055ca:	2205      	movs	r2, #5
 80055cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d0:	4851      	ldr	r0, [pc, #324]	; (8005718 <_svfiprintf_r+0x1ec>)
 80055d2:	f7fa fe0d 	bl	80001f0 <memchr>
 80055d6:	9a04      	ldr	r2, [sp, #16]
 80055d8:	b9d8      	cbnz	r0, 8005612 <_svfiprintf_r+0xe6>
 80055da:	06d0      	lsls	r0, r2, #27
 80055dc:	bf44      	itt	mi
 80055de:	2320      	movmi	r3, #32
 80055e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e4:	0711      	lsls	r1, r2, #28
 80055e6:	bf44      	itt	mi
 80055e8:	232b      	movmi	r3, #43	; 0x2b
 80055ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ee:	f89a 3000 	ldrb.w	r3, [sl]
 80055f2:	2b2a      	cmp	r3, #42	; 0x2a
 80055f4:	d015      	beq.n	8005622 <_svfiprintf_r+0xf6>
 80055f6:	9a07      	ldr	r2, [sp, #28]
 80055f8:	4654      	mov	r4, sl
 80055fa:	2000      	movs	r0, #0
 80055fc:	f04f 0c0a 	mov.w	ip, #10
 8005600:	4621      	mov	r1, r4
 8005602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005606:	3b30      	subs	r3, #48	; 0x30
 8005608:	2b09      	cmp	r3, #9
 800560a:	d94e      	bls.n	80056aa <_svfiprintf_r+0x17e>
 800560c:	b1b0      	cbz	r0, 800563c <_svfiprintf_r+0x110>
 800560e:	9207      	str	r2, [sp, #28]
 8005610:	e014      	b.n	800563c <_svfiprintf_r+0x110>
 8005612:	eba0 0308 	sub.w	r3, r0, r8
 8005616:	fa09 f303 	lsl.w	r3, r9, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	46a2      	mov	sl, r4
 8005620:	e7d2      	b.n	80055c8 <_svfiprintf_r+0x9c>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	1d19      	adds	r1, r3, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	9103      	str	r1, [sp, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	bfbb      	ittet	lt
 800562e:	425b      	neglt	r3, r3
 8005630:	f042 0202 	orrlt.w	r2, r2, #2
 8005634:	9307      	strge	r3, [sp, #28]
 8005636:	9307      	strlt	r3, [sp, #28]
 8005638:	bfb8      	it	lt
 800563a:	9204      	strlt	r2, [sp, #16]
 800563c:	7823      	ldrb	r3, [r4, #0]
 800563e:	2b2e      	cmp	r3, #46	; 0x2e
 8005640:	d10c      	bne.n	800565c <_svfiprintf_r+0x130>
 8005642:	7863      	ldrb	r3, [r4, #1]
 8005644:	2b2a      	cmp	r3, #42	; 0x2a
 8005646:	d135      	bne.n	80056b4 <_svfiprintf_r+0x188>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	1d1a      	adds	r2, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9203      	str	r2, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfb8      	it	lt
 8005654:	f04f 33ff 	movlt.w	r3, #4294967295
 8005658:	3402      	adds	r4, #2
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005728 <_svfiprintf_r+0x1fc>
 8005660:	7821      	ldrb	r1, [r4, #0]
 8005662:	2203      	movs	r2, #3
 8005664:	4650      	mov	r0, sl
 8005666:	f7fa fdc3 	bl	80001f0 <memchr>
 800566a:	b140      	cbz	r0, 800567e <_svfiprintf_r+0x152>
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	eba0 000a 	sub.w	r0, r0, sl
 8005672:	fa03 f000 	lsl.w	r0, r3, r0
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	4303      	orrs	r3, r0
 800567a:	3401      	adds	r4, #1
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005682:	4826      	ldr	r0, [pc, #152]	; (800571c <_svfiprintf_r+0x1f0>)
 8005684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005688:	2206      	movs	r2, #6
 800568a:	f7fa fdb1 	bl	80001f0 <memchr>
 800568e:	2800      	cmp	r0, #0
 8005690:	d038      	beq.n	8005704 <_svfiprintf_r+0x1d8>
 8005692:	4b23      	ldr	r3, [pc, #140]	; (8005720 <_svfiprintf_r+0x1f4>)
 8005694:	bb1b      	cbnz	r3, 80056de <_svfiprintf_r+0x1b2>
 8005696:	9b03      	ldr	r3, [sp, #12]
 8005698:	3307      	adds	r3, #7
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	3308      	adds	r3, #8
 80056a0:	9303      	str	r3, [sp, #12]
 80056a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a4:	4433      	add	r3, r6
 80056a6:	9309      	str	r3, [sp, #36]	; 0x24
 80056a8:	e767      	b.n	800557a <_svfiprintf_r+0x4e>
 80056aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ae:	460c      	mov	r4, r1
 80056b0:	2001      	movs	r0, #1
 80056b2:	e7a5      	b.n	8005600 <_svfiprintf_r+0xd4>
 80056b4:	2300      	movs	r3, #0
 80056b6:	3401      	adds	r4, #1
 80056b8:	9305      	str	r3, [sp, #20]
 80056ba:	4619      	mov	r1, r3
 80056bc:	f04f 0c0a 	mov.w	ip, #10
 80056c0:	4620      	mov	r0, r4
 80056c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c6:	3a30      	subs	r2, #48	; 0x30
 80056c8:	2a09      	cmp	r2, #9
 80056ca:	d903      	bls.n	80056d4 <_svfiprintf_r+0x1a8>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0c5      	beq.n	800565c <_svfiprintf_r+0x130>
 80056d0:	9105      	str	r1, [sp, #20]
 80056d2:	e7c3      	b.n	800565c <_svfiprintf_r+0x130>
 80056d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d8:	4604      	mov	r4, r0
 80056da:	2301      	movs	r3, #1
 80056dc:	e7f0      	b.n	80056c0 <_svfiprintf_r+0x194>
 80056de:	ab03      	add	r3, sp, #12
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	462a      	mov	r2, r5
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <_svfiprintf_r+0x1f8>)
 80056e6:	a904      	add	r1, sp, #16
 80056e8:	4638      	mov	r0, r7
 80056ea:	f3af 8000 	nop.w
 80056ee:	1c42      	adds	r2, r0, #1
 80056f0:	4606      	mov	r6, r0
 80056f2:	d1d6      	bne.n	80056a2 <_svfiprintf_r+0x176>
 80056f4:	89ab      	ldrh	r3, [r5, #12]
 80056f6:	065b      	lsls	r3, r3, #25
 80056f8:	f53f af2c 	bmi.w	8005554 <_svfiprintf_r+0x28>
 80056fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056fe:	b01d      	add	sp, #116	; 0x74
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	ab03      	add	r3, sp, #12
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	462a      	mov	r2, r5
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <_svfiprintf_r+0x1f8>)
 800570c:	a904      	add	r1, sp, #16
 800570e:	4638      	mov	r0, r7
 8005710:	f000 f9d4 	bl	8005abc <_printf_i>
 8005714:	e7eb      	b.n	80056ee <_svfiprintf_r+0x1c2>
 8005716:	bf00      	nop
 8005718:	08006766 	.word	0x08006766
 800571c:	08006770 	.word	0x08006770
 8005720:	00000000 	.word	0x00000000
 8005724:	08005475 	.word	0x08005475
 8005728:	0800676c 	.word	0x0800676c

0800572c <__sfputc_r>:
 800572c:	6893      	ldr	r3, [r2, #8]
 800572e:	3b01      	subs	r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	b410      	push	{r4}
 8005734:	6093      	str	r3, [r2, #8]
 8005736:	da08      	bge.n	800574a <__sfputc_r+0x1e>
 8005738:	6994      	ldr	r4, [r2, #24]
 800573a:	42a3      	cmp	r3, r4
 800573c:	db01      	blt.n	8005742 <__sfputc_r+0x16>
 800573e:	290a      	cmp	r1, #10
 8005740:	d103      	bne.n	800574a <__sfputc_r+0x1e>
 8005742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005746:	f000 baef 	b.w	8005d28 <__swbuf_r>
 800574a:	6813      	ldr	r3, [r2, #0]
 800574c:	1c58      	adds	r0, r3, #1
 800574e:	6010      	str	r0, [r2, #0]
 8005750:	7019      	strb	r1, [r3, #0]
 8005752:	4608      	mov	r0, r1
 8005754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005758:	4770      	bx	lr

0800575a <__sfputs_r>:
 800575a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575c:	4606      	mov	r6, r0
 800575e:	460f      	mov	r7, r1
 8005760:	4614      	mov	r4, r2
 8005762:	18d5      	adds	r5, r2, r3
 8005764:	42ac      	cmp	r4, r5
 8005766:	d101      	bne.n	800576c <__sfputs_r+0x12>
 8005768:	2000      	movs	r0, #0
 800576a:	e007      	b.n	800577c <__sfputs_r+0x22>
 800576c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005770:	463a      	mov	r2, r7
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff ffda 	bl	800572c <__sfputc_r>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d1f3      	bne.n	8005764 <__sfputs_r+0xa>
 800577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005780 <_vfiprintf_r>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	460d      	mov	r5, r1
 8005786:	b09d      	sub	sp, #116	; 0x74
 8005788:	4614      	mov	r4, r2
 800578a:	4698      	mov	r8, r3
 800578c:	4606      	mov	r6, r0
 800578e:	b118      	cbz	r0, 8005798 <_vfiprintf_r+0x18>
 8005790:	6983      	ldr	r3, [r0, #24]
 8005792:	b90b      	cbnz	r3, 8005798 <_vfiprintf_r+0x18>
 8005794:	f000 fcaa 	bl	80060ec <__sinit>
 8005798:	4b89      	ldr	r3, [pc, #548]	; (80059c0 <_vfiprintf_r+0x240>)
 800579a:	429d      	cmp	r5, r3
 800579c:	d11b      	bne.n	80057d6 <_vfiprintf_r+0x56>
 800579e:	6875      	ldr	r5, [r6, #4]
 80057a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a2:	07d9      	lsls	r1, r3, #31
 80057a4:	d405      	bmi.n	80057b2 <_vfiprintf_r+0x32>
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	059a      	lsls	r2, r3, #22
 80057aa:	d402      	bmi.n	80057b2 <_vfiprintf_r+0x32>
 80057ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ae:	f000 fd3b 	bl	8006228 <__retarget_lock_acquire_recursive>
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	071b      	lsls	r3, r3, #28
 80057b6:	d501      	bpl.n	80057bc <_vfiprintf_r+0x3c>
 80057b8:	692b      	ldr	r3, [r5, #16]
 80057ba:	b9eb      	cbnz	r3, 80057f8 <_vfiprintf_r+0x78>
 80057bc:	4629      	mov	r1, r5
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 fb04 	bl	8005dcc <__swsetup_r>
 80057c4:	b1c0      	cbz	r0, 80057f8 <_vfiprintf_r+0x78>
 80057c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c8:	07dc      	lsls	r4, r3, #31
 80057ca:	d50e      	bpl.n	80057ea <_vfiprintf_r+0x6a>
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295
 80057d0:	b01d      	add	sp, #116	; 0x74
 80057d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d6:	4b7b      	ldr	r3, [pc, #492]	; (80059c4 <_vfiprintf_r+0x244>)
 80057d8:	429d      	cmp	r5, r3
 80057da:	d101      	bne.n	80057e0 <_vfiprintf_r+0x60>
 80057dc:	68b5      	ldr	r5, [r6, #8]
 80057de:	e7df      	b.n	80057a0 <_vfiprintf_r+0x20>
 80057e0:	4b79      	ldr	r3, [pc, #484]	; (80059c8 <_vfiprintf_r+0x248>)
 80057e2:	429d      	cmp	r5, r3
 80057e4:	bf08      	it	eq
 80057e6:	68f5      	ldreq	r5, [r6, #12]
 80057e8:	e7da      	b.n	80057a0 <_vfiprintf_r+0x20>
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	0598      	lsls	r0, r3, #22
 80057ee:	d4ed      	bmi.n	80057cc <_vfiprintf_r+0x4c>
 80057f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f2:	f000 fd1a 	bl	800622a <__retarget_lock_release_recursive>
 80057f6:	e7e9      	b.n	80057cc <_vfiprintf_r+0x4c>
 80057f8:	2300      	movs	r3, #0
 80057fa:	9309      	str	r3, [sp, #36]	; 0x24
 80057fc:	2320      	movs	r3, #32
 80057fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005802:	f8cd 800c 	str.w	r8, [sp, #12]
 8005806:	2330      	movs	r3, #48	; 0x30
 8005808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059cc <_vfiprintf_r+0x24c>
 800580c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005810:	f04f 0901 	mov.w	r9, #1
 8005814:	4623      	mov	r3, r4
 8005816:	469a      	mov	sl, r3
 8005818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581c:	b10a      	cbz	r2, 8005822 <_vfiprintf_r+0xa2>
 800581e:	2a25      	cmp	r2, #37	; 0x25
 8005820:	d1f9      	bne.n	8005816 <_vfiprintf_r+0x96>
 8005822:	ebba 0b04 	subs.w	fp, sl, r4
 8005826:	d00b      	beq.n	8005840 <_vfiprintf_r+0xc0>
 8005828:	465b      	mov	r3, fp
 800582a:	4622      	mov	r2, r4
 800582c:	4629      	mov	r1, r5
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff ff93 	bl	800575a <__sfputs_r>
 8005834:	3001      	adds	r0, #1
 8005836:	f000 80aa 	beq.w	800598e <_vfiprintf_r+0x20e>
 800583a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583c:	445a      	add	r2, fp
 800583e:	9209      	str	r2, [sp, #36]	; 0x24
 8005840:	f89a 3000 	ldrb.w	r3, [sl]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a2 	beq.w	800598e <_vfiprintf_r+0x20e>
 800584a:	2300      	movs	r3, #0
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005854:	f10a 0a01 	add.w	sl, sl, #1
 8005858:	9304      	str	r3, [sp, #16]
 800585a:	9307      	str	r3, [sp, #28]
 800585c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005860:	931a      	str	r3, [sp, #104]	; 0x68
 8005862:	4654      	mov	r4, sl
 8005864:	2205      	movs	r2, #5
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4858      	ldr	r0, [pc, #352]	; (80059cc <_vfiprintf_r+0x24c>)
 800586c:	f7fa fcc0 	bl	80001f0 <memchr>
 8005870:	9a04      	ldr	r2, [sp, #16]
 8005872:	b9d8      	cbnz	r0, 80058ac <_vfiprintf_r+0x12c>
 8005874:	06d1      	lsls	r1, r2, #27
 8005876:	bf44      	itt	mi
 8005878:	2320      	movmi	r3, #32
 800587a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587e:	0713      	lsls	r3, r2, #28
 8005880:	bf44      	itt	mi
 8005882:	232b      	movmi	r3, #43	; 0x2b
 8005884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005888:	f89a 3000 	ldrb.w	r3, [sl]
 800588c:	2b2a      	cmp	r3, #42	; 0x2a
 800588e:	d015      	beq.n	80058bc <_vfiprintf_r+0x13c>
 8005890:	9a07      	ldr	r2, [sp, #28]
 8005892:	4654      	mov	r4, sl
 8005894:	2000      	movs	r0, #0
 8005896:	f04f 0c0a 	mov.w	ip, #10
 800589a:	4621      	mov	r1, r4
 800589c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a0:	3b30      	subs	r3, #48	; 0x30
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	d94e      	bls.n	8005944 <_vfiprintf_r+0x1c4>
 80058a6:	b1b0      	cbz	r0, 80058d6 <_vfiprintf_r+0x156>
 80058a8:	9207      	str	r2, [sp, #28]
 80058aa:	e014      	b.n	80058d6 <_vfiprintf_r+0x156>
 80058ac:	eba0 0308 	sub.w	r3, r0, r8
 80058b0:	fa09 f303 	lsl.w	r3, r9, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	46a2      	mov	sl, r4
 80058ba:	e7d2      	b.n	8005862 <_vfiprintf_r+0xe2>
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	1d19      	adds	r1, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	9103      	str	r1, [sp, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbb      	ittet	lt
 80058c8:	425b      	neglt	r3, r3
 80058ca:	f042 0202 	orrlt.w	r2, r2, #2
 80058ce:	9307      	strge	r3, [sp, #28]
 80058d0:	9307      	strlt	r3, [sp, #28]
 80058d2:	bfb8      	it	lt
 80058d4:	9204      	strlt	r2, [sp, #16]
 80058d6:	7823      	ldrb	r3, [r4, #0]
 80058d8:	2b2e      	cmp	r3, #46	; 0x2e
 80058da:	d10c      	bne.n	80058f6 <_vfiprintf_r+0x176>
 80058dc:	7863      	ldrb	r3, [r4, #1]
 80058de:	2b2a      	cmp	r3, #42	; 0x2a
 80058e0:	d135      	bne.n	800594e <_vfiprintf_r+0x1ce>
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	1d1a      	adds	r2, r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	9203      	str	r2, [sp, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfb8      	it	lt
 80058ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f2:	3402      	adds	r4, #2
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059dc <_vfiprintf_r+0x25c>
 80058fa:	7821      	ldrb	r1, [r4, #0]
 80058fc:	2203      	movs	r2, #3
 80058fe:	4650      	mov	r0, sl
 8005900:	f7fa fc76 	bl	80001f0 <memchr>
 8005904:	b140      	cbz	r0, 8005918 <_vfiprintf_r+0x198>
 8005906:	2340      	movs	r3, #64	; 0x40
 8005908:	eba0 000a 	sub.w	r0, r0, sl
 800590c:	fa03 f000 	lsl.w	r0, r3, r0
 8005910:	9b04      	ldr	r3, [sp, #16]
 8005912:	4303      	orrs	r3, r0
 8005914:	3401      	adds	r4, #1
 8005916:	9304      	str	r3, [sp, #16]
 8005918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591c:	482c      	ldr	r0, [pc, #176]	; (80059d0 <_vfiprintf_r+0x250>)
 800591e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005922:	2206      	movs	r2, #6
 8005924:	f7fa fc64 	bl	80001f0 <memchr>
 8005928:	2800      	cmp	r0, #0
 800592a:	d03f      	beq.n	80059ac <_vfiprintf_r+0x22c>
 800592c:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <_vfiprintf_r+0x254>)
 800592e:	bb1b      	cbnz	r3, 8005978 <_vfiprintf_r+0x1f8>
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	3307      	adds	r3, #7
 8005934:	f023 0307 	bic.w	r3, r3, #7
 8005938:	3308      	adds	r3, #8
 800593a:	9303      	str	r3, [sp, #12]
 800593c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593e:	443b      	add	r3, r7
 8005940:	9309      	str	r3, [sp, #36]	; 0x24
 8005942:	e767      	b.n	8005814 <_vfiprintf_r+0x94>
 8005944:	fb0c 3202 	mla	r2, ip, r2, r3
 8005948:	460c      	mov	r4, r1
 800594a:	2001      	movs	r0, #1
 800594c:	e7a5      	b.n	800589a <_vfiprintf_r+0x11a>
 800594e:	2300      	movs	r3, #0
 8005950:	3401      	adds	r4, #1
 8005952:	9305      	str	r3, [sp, #20]
 8005954:	4619      	mov	r1, r3
 8005956:	f04f 0c0a 	mov.w	ip, #10
 800595a:	4620      	mov	r0, r4
 800595c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005960:	3a30      	subs	r2, #48	; 0x30
 8005962:	2a09      	cmp	r2, #9
 8005964:	d903      	bls.n	800596e <_vfiprintf_r+0x1ee>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0c5      	beq.n	80058f6 <_vfiprintf_r+0x176>
 800596a:	9105      	str	r1, [sp, #20]
 800596c:	e7c3      	b.n	80058f6 <_vfiprintf_r+0x176>
 800596e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005972:	4604      	mov	r4, r0
 8005974:	2301      	movs	r3, #1
 8005976:	e7f0      	b.n	800595a <_vfiprintf_r+0x1da>
 8005978:	ab03      	add	r3, sp, #12
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	462a      	mov	r2, r5
 800597e:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <_vfiprintf_r+0x258>)
 8005980:	a904      	add	r1, sp, #16
 8005982:	4630      	mov	r0, r6
 8005984:	f3af 8000 	nop.w
 8005988:	4607      	mov	r7, r0
 800598a:	1c78      	adds	r0, r7, #1
 800598c:	d1d6      	bne.n	800593c <_vfiprintf_r+0x1bc>
 800598e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005990:	07d9      	lsls	r1, r3, #31
 8005992:	d405      	bmi.n	80059a0 <_vfiprintf_r+0x220>
 8005994:	89ab      	ldrh	r3, [r5, #12]
 8005996:	059a      	lsls	r2, r3, #22
 8005998:	d402      	bmi.n	80059a0 <_vfiprintf_r+0x220>
 800599a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599c:	f000 fc45 	bl	800622a <__retarget_lock_release_recursive>
 80059a0:	89ab      	ldrh	r3, [r5, #12]
 80059a2:	065b      	lsls	r3, r3, #25
 80059a4:	f53f af12 	bmi.w	80057cc <_vfiprintf_r+0x4c>
 80059a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059aa:	e711      	b.n	80057d0 <_vfiprintf_r+0x50>
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <_vfiprintf_r+0x258>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4630      	mov	r0, r6
 80059b8:	f000 f880 	bl	8005abc <_printf_i>
 80059bc:	e7e4      	b.n	8005988 <_vfiprintf_r+0x208>
 80059be:	bf00      	nop
 80059c0:	080067bc 	.word	0x080067bc
 80059c4:	080067dc 	.word	0x080067dc
 80059c8:	0800679c 	.word	0x0800679c
 80059cc:	08006766 	.word	0x08006766
 80059d0:	08006770 	.word	0x08006770
 80059d4:	00000000 	.word	0x00000000
 80059d8:	0800575b 	.word	0x0800575b
 80059dc:	0800676c 	.word	0x0800676c

080059e0 <_printf_common>:
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	4616      	mov	r6, r2
 80059e6:	4699      	mov	r9, r3
 80059e8:	688a      	ldr	r2, [r1, #8]
 80059ea:	690b      	ldr	r3, [r1, #16]
 80059ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	bfb8      	it	lt
 80059f4:	4613      	movlt	r3, r2
 80059f6:	6033      	str	r3, [r6, #0]
 80059f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059fc:	4607      	mov	r7, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	b10a      	cbz	r2, 8005a06 <_printf_common+0x26>
 8005a02:	3301      	adds	r3, #1
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	0699      	lsls	r1, r3, #26
 8005a0a:	bf42      	ittt	mi
 8005a0c:	6833      	ldrmi	r3, [r6, #0]
 8005a0e:	3302      	addmi	r3, #2
 8005a10:	6033      	strmi	r3, [r6, #0]
 8005a12:	6825      	ldr	r5, [r4, #0]
 8005a14:	f015 0506 	ands.w	r5, r5, #6
 8005a18:	d106      	bne.n	8005a28 <_printf_common+0x48>
 8005a1a:	f104 0a19 	add.w	sl, r4, #25
 8005a1e:	68e3      	ldr	r3, [r4, #12]
 8005a20:	6832      	ldr	r2, [r6, #0]
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	42ab      	cmp	r3, r5
 8005a26:	dc26      	bgt.n	8005a76 <_printf_common+0x96>
 8005a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a2c:	1e13      	subs	r3, r2, #0
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	bf18      	it	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	0692      	lsls	r2, r2, #26
 8005a36:	d42b      	bmi.n	8005a90 <_printf_common+0xb0>
 8005a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4638      	mov	r0, r7
 8005a40:	47c0      	blx	r8
 8005a42:	3001      	adds	r0, #1
 8005a44:	d01e      	beq.n	8005a84 <_printf_common+0xa4>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	68e5      	ldr	r5, [r4, #12]
 8005a4a:	6832      	ldr	r2, [r6, #0]
 8005a4c:	f003 0306 	and.w	r3, r3, #6
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	bf08      	it	eq
 8005a54:	1aad      	subeq	r5, r5, r2
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	6922      	ldr	r2, [r4, #16]
 8005a5a:	bf0c      	ite	eq
 8005a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a60:	2500      	movne	r5, #0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	bfc4      	itt	gt
 8005a66:	1a9b      	subgt	r3, r3, r2
 8005a68:	18ed      	addgt	r5, r5, r3
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	341a      	adds	r4, #26
 8005a6e:	42b5      	cmp	r5, r6
 8005a70:	d11a      	bne.n	8005aa8 <_printf_common+0xc8>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e008      	b.n	8005a88 <_printf_common+0xa8>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4652      	mov	r2, sl
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	47c0      	blx	r8
 8005a80:	3001      	adds	r0, #1
 8005a82:	d103      	bne.n	8005a8c <_printf_common+0xac>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	e7c6      	b.n	8005a1e <_printf_common+0x3e>
 8005a90:	18e1      	adds	r1, r4, r3
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	2030      	movs	r0, #48	; 0x30
 8005a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a9a:	4422      	add	r2, r4
 8005a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	e7c7      	b.n	8005a38 <_printf_common+0x58>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4649      	mov	r1, r9
 8005aae:	4638      	mov	r0, r7
 8005ab0:	47c0      	blx	r8
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d0e6      	beq.n	8005a84 <_printf_common+0xa4>
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7d9      	b.n	8005a6e <_printf_common+0x8e>
	...

08005abc <_printf_i>:
 8005abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	7e0f      	ldrb	r7, [r1, #24]
 8005ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ac4:	2f78      	cmp	r7, #120	; 0x78
 8005ac6:	4691      	mov	r9, r2
 8005ac8:	4680      	mov	r8, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	469a      	mov	sl, r3
 8005ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ad2:	d807      	bhi.n	8005ae4 <_printf_i+0x28>
 8005ad4:	2f62      	cmp	r7, #98	; 0x62
 8005ad6:	d80a      	bhi.n	8005aee <_printf_i+0x32>
 8005ad8:	2f00      	cmp	r7, #0
 8005ada:	f000 80d8 	beq.w	8005c8e <_printf_i+0x1d2>
 8005ade:	2f58      	cmp	r7, #88	; 0x58
 8005ae0:	f000 80a3 	beq.w	8005c2a <_printf_i+0x16e>
 8005ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aec:	e03a      	b.n	8005b64 <_printf_i+0xa8>
 8005aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005af2:	2b15      	cmp	r3, #21
 8005af4:	d8f6      	bhi.n	8005ae4 <_printf_i+0x28>
 8005af6:	a101      	add	r1, pc, #4	; (adr r1, 8005afc <_printf_i+0x40>)
 8005af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005ae5 	.word	0x08005ae5
 8005b08:	08005ae5 	.word	0x08005ae5
 8005b0c:	08005ae5 	.word	0x08005ae5
 8005b10:	08005ae5 	.word	0x08005ae5
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005ae5 	.word	0x08005ae5
 8005b1c:	08005ae5 	.word	0x08005ae5
 8005b20:	08005ae5 	.word	0x08005ae5
 8005b24:	08005ae5 	.word	0x08005ae5
 8005b28:	08005c75 	.word	0x08005c75
 8005b2c:	08005b99 	.word	0x08005b99
 8005b30:	08005c57 	.word	0x08005c57
 8005b34:	08005ae5 	.word	0x08005ae5
 8005b38:	08005ae5 	.word	0x08005ae5
 8005b3c:	08005c97 	.word	0x08005c97
 8005b40:	08005ae5 	.word	0x08005ae5
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005ae5 	.word	0x08005ae5
 8005b4c:	08005ae5 	.word	0x08005ae5
 8005b50:	08005c5f 	.word	0x08005c5f
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	1d1a      	adds	r2, r3, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	602a      	str	r2, [r5, #0]
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0a3      	b.n	8005cb0 <_printf_i+0x1f4>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	6829      	ldr	r1, [r5, #0]
 8005b6c:	0606      	lsls	r6, r0, #24
 8005b6e:	f101 0304 	add.w	r3, r1, #4
 8005b72:	d50a      	bpl.n	8005b8a <_printf_i+0xce>
 8005b74:	680e      	ldr	r6, [r1, #0]
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	da03      	bge.n	8005b84 <_printf_i+0xc8>
 8005b7c:	232d      	movs	r3, #45	; 0x2d
 8005b7e:	4276      	negs	r6, r6
 8005b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b84:	485e      	ldr	r0, [pc, #376]	; (8005d00 <_printf_i+0x244>)
 8005b86:	230a      	movs	r3, #10
 8005b88:	e019      	b.n	8005bbe <_printf_i+0x102>
 8005b8a:	680e      	ldr	r6, [r1, #0]
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b92:	bf18      	it	ne
 8005b94:	b236      	sxthne	r6, r6
 8005b96:	e7ef      	b.n	8005b78 <_printf_i+0xbc>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	1d19      	adds	r1, r3, #4
 8005b9e:	6029      	str	r1, [r5, #0]
 8005ba0:	0601      	lsls	r1, r0, #24
 8005ba2:	d501      	bpl.n	8005ba8 <_printf_i+0xec>
 8005ba4:	681e      	ldr	r6, [r3, #0]
 8005ba6:	e002      	b.n	8005bae <_printf_i+0xf2>
 8005ba8:	0646      	lsls	r6, r0, #25
 8005baa:	d5fb      	bpl.n	8005ba4 <_printf_i+0xe8>
 8005bac:	881e      	ldrh	r6, [r3, #0]
 8005bae:	4854      	ldr	r0, [pc, #336]	; (8005d00 <_printf_i+0x244>)
 8005bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2308      	moveq	r3, #8
 8005bb6:	230a      	movne	r3, #10
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bbe:	6865      	ldr	r5, [r4, #4]
 8005bc0:	60a5      	str	r5, [r4, #8]
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	bfa2      	ittt	ge
 8005bc6:	6821      	ldrge	r1, [r4, #0]
 8005bc8:	f021 0104 	bicge.w	r1, r1, #4
 8005bcc:	6021      	strge	r1, [r4, #0]
 8005bce:	b90e      	cbnz	r6, 8005bd4 <_printf_i+0x118>
 8005bd0:	2d00      	cmp	r5, #0
 8005bd2:	d04d      	beq.n	8005c70 <_printf_i+0x1b4>
 8005bd4:	4615      	mov	r5, r2
 8005bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bda:	fb03 6711 	mls	r7, r3, r1, r6
 8005bde:	5dc7      	ldrb	r7, [r0, r7]
 8005be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005be4:	4637      	mov	r7, r6
 8005be6:	42bb      	cmp	r3, r7
 8005be8:	460e      	mov	r6, r1
 8005bea:	d9f4      	bls.n	8005bd6 <_printf_i+0x11a>
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d10b      	bne.n	8005c08 <_printf_i+0x14c>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	07de      	lsls	r6, r3, #31
 8005bf4:	d508      	bpl.n	8005c08 <_printf_i+0x14c>
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	6861      	ldr	r1, [r4, #4]
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	bfde      	ittt	le
 8005bfe:	2330      	movle	r3, #48	; 0x30
 8005c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c08:	1b52      	subs	r2, r2, r5
 8005c0a:	6122      	str	r2, [r4, #16]
 8005c0c:	f8cd a000 	str.w	sl, [sp]
 8005c10:	464b      	mov	r3, r9
 8005c12:	aa03      	add	r2, sp, #12
 8005c14:	4621      	mov	r1, r4
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7ff fee2 	bl	80059e0 <_printf_common>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d14c      	bne.n	8005cba <_printf_i+0x1fe>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	b004      	add	sp, #16
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2a:	4835      	ldr	r0, [pc, #212]	; (8005d00 <_printf_i+0x244>)
 8005c2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c30:	6829      	ldr	r1, [r5, #0]
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c38:	6029      	str	r1, [r5, #0]
 8005c3a:	061d      	lsls	r5, r3, #24
 8005c3c:	d514      	bpl.n	8005c68 <_printf_i+0x1ac>
 8005c3e:	07df      	lsls	r7, r3, #31
 8005c40:	bf44      	itt	mi
 8005c42:	f043 0320 	orrmi.w	r3, r3, #32
 8005c46:	6023      	strmi	r3, [r4, #0]
 8005c48:	b91e      	cbnz	r6, 8005c52 <_printf_i+0x196>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	f023 0320 	bic.w	r3, r3, #32
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	2310      	movs	r3, #16
 8005c54:	e7b0      	b.n	8005bb8 <_printf_i+0xfc>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	f043 0320 	orr.w	r3, r3, #32
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	2378      	movs	r3, #120	; 0x78
 8005c60:	4828      	ldr	r0, [pc, #160]	; (8005d04 <_printf_i+0x248>)
 8005c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c66:	e7e3      	b.n	8005c30 <_printf_i+0x174>
 8005c68:	0659      	lsls	r1, r3, #25
 8005c6a:	bf48      	it	mi
 8005c6c:	b2b6      	uxthmi	r6, r6
 8005c6e:	e7e6      	b.n	8005c3e <_printf_i+0x182>
 8005c70:	4615      	mov	r5, r2
 8005c72:	e7bb      	b.n	8005bec <_printf_i+0x130>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	6826      	ldr	r6, [r4, #0]
 8005c78:	6961      	ldr	r1, [r4, #20]
 8005c7a:	1d18      	adds	r0, r3, #4
 8005c7c:	6028      	str	r0, [r5, #0]
 8005c7e:	0635      	lsls	r5, r6, #24
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	d501      	bpl.n	8005c88 <_printf_i+0x1cc>
 8005c84:	6019      	str	r1, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <_printf_i+0x1d2>
 8005c88:	0670      	lsls	r0, r6, #25
 8005c8a:	d5fb      	bpl.n	8005c84 <_printf_i+0x1c8>
 8005c8c:	8019      	strh	r1, [r3, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	4615      	mov	r5, r2
 8005c94:	e7ba      	b.n	8005c0c <_printf_i+0x150>
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	602a      	str	r2, [r5, #0]
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	6862      	ldr	r2, [r4, #4]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f7fa faa4 	bl	80001f0 <memchr>
 8005ca8:	b108      	cbz	r0, 8005cae <_printf_i+0x1f2>
 8005caa:	1b40      	subs	r0, r0, r5
 8005cac:	6060      	str	r0, [r4, #4]
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb8:	e7a8      	b.n	8005c0c <_printf_i+0x150>
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	47d0      	blx	sl
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d0ab      	beq.n	8005c20 <_printf_i+0x164>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	079b      	lsls	r3, r3, #30
 8005ccc:	d413      	bmi.n	8005cf6 <_printf_i+0x23a>
 8005cce:	68e0      	ldr	r0, [r4, #12]
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	4298      	cmp	r0, r3
 8005cd4:	bfb8      	it	lt
 8005cd6:	4618      	movlt	r0, r3
 8005cd8:	e7a4      	b.n	8005c24 <_printf_i+0x168>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d09b      	beq.n	8005c20 <_printf_i+0x164>
 8005ce8:	3501      	adds	r5, #1
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	9903      	ldr	r1, [sp, #12]
 8005cee:	1a5b      	subs	r3, r3, r1
 8005cf0:	42ab      	cmp	r3, r5
 8005cf2:	dcf2      	bgt.n	8005cda <_printf_i+0x21e>
 8005cf4:	e7eb      	b.n	8005cce <_printf_i+0x212>
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	f104 0619 	add.w	r6, r4, #25
 8005cfc:	e7f5      	b.n	8005cea <_printf_i+0x22e>
 8005cfe:	bf00      	nop
 8005d00:	08006777 	.word	0x08006777
 8005d04:	08006788 	.word	0x08006788

08005d08 <_sbrk_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d06      	ldr	r5, [pc, #24]	; (8005d24 <_sbrk_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb f914 	bl	8000f40 <_sbrk>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_sbrk_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_sbrk_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20012f64 	.word	0x20012f64

08005d28 <__swbuf_r>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	460e      	mov	r6, r1
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	4605      	mov	r5, r0
 8005d30:	b118      	cbz	r0, 8005d3a <__swbuf_r+0x12>
 8005d32:	6983      	ldr	r3, [r0, #24]
 8005d34:	b90b      	cbnz	r3, 8005d3a <__swbuf_r+0x12>
 8005d36:	f000 f9d9 	bl	80060ec <__sinit>
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <__swbuf_r+0x98>)
 8005d3c:	429c      	cmp	r4, r3
 8005d3e:	d12b      	bne.n	8005d98 <__swbuf_r+0x70>
 8005d40:	686c      	ldr	r4, [r5, #4]
 8005d42:	69a3      	ldr	r3, [r4, #24]
 8005d44:	60a3      	str	r3, [r4, #8]
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	071a      	lsls	r2, r3, #28
 8005d4a:	d52f      	bpl.n	8005dac <__swbuf_r+0x84>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	b36b      	cbz	r3, 8005dac <__swbuf_r+0x84>
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	1ac0      	subs	r0, r0, r3
 8005d56:	6963      	ldr	r3, [r4, #20]
 8005d58:	b2f6      	uxtb	r6, r6
 8005d5a:	4283      	cmp	r3, r0
 8005d5c:	4637      	mov	r7, r6
 8005d5e:	dc04      	bgt.n	8005d6a <__swbuf_r+0x42>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f92e 	bl	8005fc4 <_fflush_r>
 8005d68:	bb30      	cbnz	r0, 8005db8 <__swbuf_r+0x90>
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60a3      	str	r3, [r4, #8]
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	6022      	str	r2, [r4, #0]
 8005d76:	701e      	strb	r6, [r3, #0]
 8005d78:	6963      	ldr	r3, [r4, #20]
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	4283      	cmp	r3, r0
 8005d7e:	d004      	beq.n	8005d8a <__swbuf_r+0x62>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	07db      	lsls	r3, r3, #31
 8005d84:	d506      	bpl.n	8005d94 <__swbuf_r+0x6c>
 8005d86:	2e0a      	cmp	r6, #10
 8005d88:	d104      	bne.n	8005d94 <__swbuf_r+0x6c>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 f919 	bl	8005fc4 <_fflush_r>
 8005d92:	b988      	cbnz	r0, 8005db8 <__swbuf_r+0x90>
 8005d94:	4638      	mov	r0, r7
 8005d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <__swbuf_r+0x9c>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d101      	bne.n	8005da2 <__swbuf_r+0x7a>
 8005d9e:	68ac      	ldr	r4, [r5, #8]
 8005da0:	e7cf      	b.n	8005d42 <__swbuf_r+0x1a>
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <__swbuf_r+0xa0>)
 8005da4:	429c      	cmp	r4, r3
 8005da6:	bf08      	it	eq
 8005da8:	68ec      	ldreq	r4, [r5, #12]
 8005daa:	e7ca      	b.n	8005d42 <__swbuf_r+0x1a>
 8005dac:	4621      	mov	r1, r4
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f80c 	bl	8005dcc <__swsetup_r>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d0cb      	beq.n	8005d50 <__swbuf_r+0x28>
 8005db8:	f04f 37ff 	mov.w	r7, #4294967295
 8005dbc:	e7ea      	b.n	8005d94 <__swbuf_r+0x6c>
 8005dbe:	bf00      	nop
 8005dc0:	080067bc 	.word	0x080067bc
 8005dc4:	080067dc 	.word	0x080067dc
 8005dc8:	0800679c 	.word	0x0800679c

08005dcc <__swsetup_r>:
 8005dcc:	4b32      	ldr	r3, [pc, #200]	; (8005e98 <__swsetup_r+0xcc>)
 8005dce:	b570      	push	{r4, r5, r6, lr}
 8005dd0:	681d      	ldr	r5, [r3, #0]
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	b125      	cbz	r5, 8005de2 <__swsetup_r+0x16>
 8005dd8:	69ab      	ldr	r3, [r5, #24]
 8005dda:	b913      	cbnz	r3, 8005de2 <__swsetup_r+0x16>
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 f985 	bl	80060ec <__sinit>
 8005de2:	4b2e      	ldr	r3, [pc, #184]	; (8005e9c <__swsetup_r+0xd0>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	d10f      	bne.n	8005e08 <__swsetup_r+0x3c>
 8005de8:	686c      	ldr	r4, [r5, #4]
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005df0:	0719      	lsls	r1, r3, #28
 8005df2:	d42c      	bmi.n	8005e4e <__swsetup_r+0x82>
 8005df4:	06dd      	lsls	r5, r3, #27
 8005df6:	d411      	bmi.n	8005e1c <__swsetup_r+0x50>
 8005df8:	2309      	movs	r3, #9
 8005dfa:	6033      	str	r3, [r6, #0]
 8005dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	e03e      	b.n	8005e86 <__swsetup_r+0xba>
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <__swsetup_r+0xd4>)
 8005e0a:	429c      	cmp	r4, r3
 8005e0c:	d101      	bne.n	8005e12 <__swsetup_r+0x46>
 8005e0e:	68ac      	ldr	r4, [r5, #8]
 8005e10:	e7eb      	b.n	8005dea <__swsetup_r+0x1e>
 8005e12:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <__swsetup_r+0xd8>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	bf08      	it	eq
 8005e18:	68ec      	ldreq	r4, [r5, #12]
 8005e1a:	e7e6      	b.n	8005dea <__swsetup_r+0x1e>
 8005e1c:	0758      	lsls	r0, r3, #29
 8005e1e:	d512      	bpl.n	8005e46 <__swsetup_r+0x7a>
 8005e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e22:	b141      	cbz	r1, 8005e36 <__swsetup_r+0x6a>
 8005e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d002      	beq.n	8005e32 <__swsetup_r+0x66>
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff fa41 	bl	80052b4 <_free_r>
 8005e32:	2300      	movs	r3, #0
 8005e34:	6363      	str	r3, [r4, #52]	; 0x34
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f043 0308 	orr.w	r3, r3, #8
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	b94b      	cbnz	r3, 8005e66 <__swsetup_r+0x9a>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5c:	d003      	beq.n	8005e66 <__swsetup_r+0x9a>
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 fa09 	bl	8006278 <__smakebuf_r>
 8005e66:	89a0      	ldrh	r0, [r4, #12]
 8005e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e6c:	f010 0301 	ands.w	r3, r0, #1
 8005e70:	d00a      	beq.n	8005e88 <__swsetup_r+0xbc>
 8005e72:	2300      	movs	r3, #0
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	6963      	ldr	r3, [r4, #20]
 8005e78:	425b      	negs	r3, r3
 8005e7a:	61a3      	str	r3, [r4, #24]
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	b943      	cbnz	r3, 8005e92 <__swsetup_r+0xc6>
 8005e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e84:	d1ba      	bne.n	8005dfc <__swsetup_r+0x30>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	0781      	lsls	r1, r0, #30
 8005e8a:	bf58      	it	pl
 8005e8c:	6963      	ldrpl	r3, [r4, #20]
 8005e8e:	60a3      	str	r3, [r4, #8]
 8005e90:	e7f4      	b.n	8005e7c <__swsetup_r+0xb0>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e7f7      	b.n	8005e86 <__swsetup_r+0xba>
 8005e96:	bf00      	nop
 8005e98:	20000014 	.word	0x20000014
 8005e9c:	080067bc 	.word	0x080067bc
 8005ea0:	080067dc 	.word	0x080067dc
 8005ea4:	0800679c 	.word	0x0800679c

08005ea8 <abort>:
 8005ea8:	b508      	push	{r3, lr}
 8005eaa:	2006      	movs	r0, #6
 8005eac:	f000 faa2 	bl	80063f4 <raise>
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7fa ffcd 	bl	8000e50 <_exit>
	...

08005eb8 <__sflush_r>:
 8005eb8:	898a      	ldrh	r2, [r1, #12]
 8005eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	0710      	lsls	r0, r2, #28
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	d458      	bmi.n	8005f78 <__sflush_r+0xc0>
 8005ec6:	684b      	ldr	r3, [r1, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dc05      	bgt.n	8005ed8 <__sflush_r+0x20>
 8005ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dc02      	bgt.n	8005ed8 <__sflush_r+0x20>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	d0f9      	beq.n	8005ed2 <__sflush_r+0x1a>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ee4:	682f      	ldr	r7, [r5, #0]
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	d032      	beq.n	8005f50 <__sflush_r+0x98>
 8005eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	075a      	lsls	r2, r3, #29
 8005ef0:	d505      	bpl.n	8005efe <__sflush_r+0x46>
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	1ac0      	subs	r0, r0, r3
 8005ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ef8:	b10b      	cbz	r3, 8005efe <__sflush_r+0x46>
 8005efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005efc:	1ac0      	subs	r0, r0, r3
 8005efe:	2300      	movs	r3, #0
 8005f00:	4602      	mov	r2, r0
 8005f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f04:	6a21      	ldr	r1, [r4, #32]
 8005f06:	4628      	mov	r0, r5
 8005f08:	47b0      	blx	r6
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	d106      	bne.n	8005f1e <__sflush_r+0x66>
 8005f10:	6829      	ldr	r1, [r5, #0]
 8005f12:	291d      	cmp	r1, #29
 8005f14:	d82c      	bhi.n	8005f70 <__sflush_r+0xb8>
 8005f16:	4a2a      	ldr	r2, [pc, #168]	; (8005fc0 <__sflush_r+0x108>)
 8005f18:	40ca      	lsrs	r2, r1
 8005f1a:	07d6      	lsls	r6, r2, #31
 8005f1c:	d528      	bpl.n	8005f70 <__sflush_r+0xb8>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	6062      	str	r2, [r4, #4]
 8005f22:	04d9      	lsls	r1, r3, #19
 8005f24:	6922      	ldr	r2, [r4, #16]
 8005f26:	6022      	str	r2, [r4, #0]
 8005f28:	d504      	bpl.n	8005f34 <__sflush_r+0x7c>
 8005f2a:	1c42      	adds	r2, r0, #1
 8005f2c:	d101      	bne.n	8005f32 <__sflush_r+0x7a>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	b903      	cbnz	r3, 8005f34 <__sflush_r+0x7c>
 8005f32:	6560      	str	r0, [r4, #84]	; 0x54
 8005f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f36:	602f      	str	r7, [r5, #0]
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d0ca      	beq.n	8005ed2 <__sflush_r+0x1a>
 8005f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f40:	4299      	cmp	r1, r3
 8005f42:	d002      	beq.n	8005f4a <__sflush_r+0x92>
 8005f44:	4628      	mov	r0, r5
 8005f46:	f7ff f9b5 	bl	80052b4 <_free_r>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f4e:	e7c1      	b.n	8005ed4 <__sflush_r+0x1c>
 8005f50:	6a21      	ldr	r1, [r4, #32]
 8005f52:	2301      	movs	r3, #1
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b0      	blx	r6
 8005f58:	1c41      	adds	r1, r0, #1
 8005f5a:	d1c7      	bne.n	8005eec <__sflush_r+0x34>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0c4      	beq.n	8005eec <__sflush_r+0x34>
 8005f62:	2b1d      	cmp	r3, #29
 8005f64:	d001      	beq.n	8005f6a <__sflush_r+0xb2>
 8005f66:	2b16      	cmp	r3, #22
 8005f68:	d101      	bne.n	8005f6e <__sflush_r+0xb6>
 8005f6a:	602f      	str	r7, [r5, #0]
 8005f6c:	e7b1      	b.n	8005ed2 <__sflush_r+0x1a>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	e7ad      	b.n	8005ed4 <__sflush_r+0x1c>
 8005f78:	690f      	ldr	r7, [r1, #16]
 8005f7a:	2f00      	cmp	r7, #0
 8005f7c:	d0a9      	beq.n	8005ed2 <__sflush_r+0x1a>
 8005f7e:	0793      	lsls	r3, r2, #30
 8005f80:	680e      	ldr	r6, [r1, #0]
 8005f82:	bf08      	it	eq
 8005f84:	694b      	ldreq	r3, [r1, #20]
 8005f86:	600f      	str	r7, [r1, #0]
 8005f88:	bf18      	it	ne
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	eba6 0807 	sub.w	r8, r6, r7
 8005f90:	608b      	str	r3, [r1, #8]
 8005f92:	f1b8 0f00 	cmp.w	r8, #0
 8005f96:	dd9c      	ble.n	8005ed2 <__sflush_r+0x1a>
 8005f98:	6a21      	ldr	r1, [r4, #32]
 8005f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	463a      	mov	r2, r7
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b0      	blx	r6
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	dc06      	bgt.n	8005fb6 <__sflush_r+0xfe>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	e78e      	b.n	8005ed4 <__sflush_r+0x1c>
 8005fb6:	4407      	add	r7, r0
 8005fb8:	eba8 0800 	sub.w	r8, r8, r0
 8005fbc:	e7e9      	b.n	8005f92 <__sflush_r+0xda>
 8005fbe:	bf00      	nop
 8005fc0:	20400001 	.word	0x20400001

08005fc4 <_fflush_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	690b      	ldr	r3, [r1, #16]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b913      	cbnz	r3, 8005fd4 <_fflush_r+0x10>
 8005fce:	2500      	movs	r5, #0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	b118      	cbz	r0, 8005fde <_fflush_r+0x1a>
 8005fd6:	6983      	ldr	r3, [r0, #24]
 8005fd8:	b90b      	cbnz	r3, 8005fde <_fflush_r+0x1a>
 8005fda:	f000 f887 	bl	80060ec <__sinit>
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <_fflush_r+0x6c>)
 8005fe0:	429c      	cmp	r4, r3
 8005fe2:	d11b      	bne.n	800601c <_fflush_r+0x58>
 8005fe4:	686c      	ldr	r4, [r5, #4]
 8005fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ef      	beq.n	8005fce <_fflush_r+0xa>
 8005fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ff0:	07d0      	lsls	r0, r2, #31
 8005ff2:	d404      	bmi.n	8005ffe <_fflush_r+0x3a>
 8005ff4:	0599      	lsls	r1, r3, #22
 8005ff6:	d402      	bmi.n	8005ffe <_fflush_r+0x3a>
 8005ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffa:	f000 f915 	bl	8006228 <__retarget_lock_acquire_recursive>
 8005ffe:	4628      	mov	r0, r5
 8006000:	4621      	mov	r1, r4
 8006002:	f7ff ff59 	bl	8005eb8 <__sflush_r>
 8006006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006008:	07da      	lsls	r2, r3, #31
 800600a:	4605      	mov	r5, r0
 800600c:	d4e0      	bmi.n	8005fd0 <_fflush_r+0xc>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	059b      	lsls	r3, r3, #22
 8006012:	d4dd      	bmi.n	8005fd0 <_fflush_r+0xc>
 8006014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006016:	f000 f908 	bl	800622a <__retarget_lock_release_recursive>
 800601a:	e7d9      	b.n	8005fd0 <_fflush_r+0xc>
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <_fflush_r+0x70>)
 800601e:	429c      	cmp	r4, r3
 8006020:	d101      	bne.n	8006026 <_fflush_r+0x62>
 8006022:	68ac      	ldr	r4, [r5, #8]
 8006024:	e7df      	b.n	8005fe6 <_fflush_r+0x22>
 8006026:	4b04      	ldr	r3, [pc, #16]	; (8006038 <_fflush_r+0x74>)
 8006028:	429c      	cmp	r4, r3
 800602a:	bf08      	it	eq
 800602c:	68ec      	ldreq	r4, [r5, #12]
 800602e:	e7da      	b.n	8005fe6 <_fflush_r+0x22>
 8006030:	080067bc 	.word	0x080067bc
 8006034:	080067dc 	.word	0x080067dc
 8006038:	0800679c 	.word	0x0800679c

0800603c <std>:
 800603c:	2300      	movs	r3, #0
 800603e:	b510      	push	{r4, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	e9c0 3300 	strd	r3, r3, [r0]
 8006046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604a:	6083      	str	r3, [r0, #8]
 800604c:	8181      	strh	r1, [r0, #12]
 800604e:	6643      	str	r3, [r0, #100]	; 0x64
 8006050:	81c2      	strh	r2, [r0, #14]
 8006052:	6183      	str	r3, [r0, #24]
 8006054:	4619      	mov	r1, r3
 8006056:	2208      	movs	r2, #8
 8006058:	305c      	adds	r0, #92	; 0x5c
 800605a:	f7ff f88d 	bl	8005178 <memset>
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <std+0x38>)
 8006060:	6263      	str	r3, [r4, #36]	; 0x24
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <std+0x3c>)
 8006064:	62a3      	str	r3, [r4, #40]	; 0x28
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <std+0x40>)
 8006068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <std+0x44>)
 800606c:	6224      	str	r4, [r4, #32]
 800606e:	6323      	str	r3, [r4, #48]	; 0x30
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	0800642d 	.word	0x0800642d
 8006078:	0800644f 	.word	0x0800644f
 800607c:	08006487 	.word	0x08006487
 8006080:	080064ab 	.word	0x080064ab

08006084 <_cleanup_r>:
 8006084:	4901      	ldr	r1, [pc, #4]	; (800608c <_cleanup_r+0x8>)
 8006086:	f000 b8af 	b.w	80061e8 <_fwalk_reent>
 800608a:	bf00      	nop
 800608c:	08005fc5 	.word	0x08005fc5

08006090 <__sfmoreglue>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	2268      	movs	r2, #104	; 0x68
 8006094:	1e4d      	subs	r5, r1, #1
 8006096:	4355      	muls	r5, r2
 8006098:	460e      	mov	r6, r1
 800609a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800609e:	f7ff f975 	bl	800538c <_malloc_r>
 80060a2:	4604      	mov	r4, r0
 80060a4:	b140      	cbz	r0, 80060b8 <__sfmoreglue+0x28>
 80060a6:	2100      	movs	r1, #0
 80060a8:	e9c0 1600 	strd	r1, r6, [r0]
 80060ac:	300c      	adds	r0, #12
 80060ae:	60a0      	str	r0, [r4, #8]
 80060b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060b4:	f7ff f860 	bl	8005178 <memset>
 80060b8:	4620      	mov	r0, r4
 80060ba:	bd70      	pop	{r4, r5, r6, pc}

080060bc <__sfp_lock_acquire>:
 80060bc:	4801      	ldr	r0, [pc, #4]	; (80060c4 <__sfp_lock_acquire+0x8>)
 80060be:	f000 b8b3 	b.w	8006228 <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	20012f61 	.word	0x20012f61

080060c8 <__sfp_lock_release>:
 80060c8:	4801      	ldr	r0, [pc, #4]	; (80060d0 <__sfp_lock_release+0x8>)
 80060ca:	f000 b8ae 	b.w	800622a <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	20012f61 	.word	0x20012f61

080060d4 <__sinit_lock_acquire>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__sinit_lock_acquire+0x8>)
 80060d6:	f000 b8a7 	b.w	8006228 <__retarget_lock_acquire_recursive>
 80060da:	bf00      	nop
 80060dc:	20012f62 	.word	0x20012f62

080060e0 <__sinit_lock_release>:
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <__sinit_lock_release+0x8>)
 80060e2:	f000 b8a2 	b.w	800622a <__retarget_lock_release_recursive>
 80060e6:	bf00      	nop
 80060e8:	20012f62 	.word	0x20012f62

080060ec <__sinit>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	f7ff fff0 	bl	80060d4 <__sinit_lock_acquire>
 80060f4:	69a3      	ldr	r3, [r4, #24]
 80060f6:	b11b      	cbz	r3, 8006100 <__sinit+0x14>
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fc:	f7ff bff0 	b.w	80060e0 <__sinit_lock_release>
 8006100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006104:	6523      	str	r3, [r4, #80]	; 0x50
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <__sinit+0x68>)
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <__sinit+0x6c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	62a2      	str	r2, [r4, #40]	; 0x28
 800610e:	42a3      	cmp	r3, r4
 8006110:	bf04      	itt	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	61a3      	streq	r3, [r4, #24]
 8006116:	4620      	mov	r0, r4
 8006118:	f000 f820 	bl	800615c <__sfp>
 800611c:	6060      	str	r0, [r4, #4]
 800611e:	4620      	mov	r0, r4
 8006120:	f000 f81c 	bl	800615c <__sfp>
 8006124:	60a0      	str	r0, [r4, #8]
 8006126:	4620      	mov	r0, r4
 8006128:	f000 f818 	bl	800615c <__sfp>
 800612c:	2200      	movs	r2, #0
 800612e:	60e0      	str	r0, [r4, #12]
 8006130:	2104      	movs	r1, #4
 8006132:	6860      	ldr	r0, [r4, #4]
 8006134:	f7ff ff82 	bl	800603c <std>
 8006138:	68a0      	ldr	r0, [r4, #8]
 800613a:	2201      	movs	r2, #1
 800613c:	2109      	movs	r1, #9
 800613e:	f7ff ff7d 	bl	800603c <std>
 8006142:	68e0      	ldr	r0, [r4, #12]
 8006144:	2202      	movs	r2, #2
 8006146:	2112      	movs	r1, #18
 8006148:	f7ff ff78 	bl	800603c <std>
 800614c:	2301      	movs	r3, #1
 800614e:	61a3      	str	r3, [r4, #24]
 8006150:	e7d2      	b.n	80060f8 <__sinit+0xc>
 8006152:	bf00      	nop
 8006154:	080066b4 	.word	0x080066b4
 8006158:	08006085 	.word	0x08006085

0800615c <__sfp>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	4607      	mov	r7, r0
 8006160:	f7ff ffac 	bl	80060bc <__sfp_lock_acquire>
 8006164:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <__sfp+0x84>)
 8006166:	681e      	ldr	r6, [r3, #0]
 8006168:	69b3      	ldr	r3, [r6, #24]
 800616a:	b913      	cbnz	r3, 8006172 <__sfp+0x16>
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbd 	bl	80060ec <__sinit>
 8006172:	3648      	adds	r6, #72	; 0x48
 8006174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	d503      	bpl.n	8006184 <__sfp+0x28>
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	b30b      	cbz	r3, 80061c4 <__sfp+0x68>
 8006180:	6836      	ldr	r6, [r6, #0]
 8006182:	e7f7      	b.n	8006174 <__sfp+0x18>
 8006184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006188:	b9d5      	cbnz	r5, 80061c0 <__sfp+0x64>
 800618a:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <__sfp+0x88>)
 800618c:	60e3      	str	r3, [r4, #12]
 800618e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006192:	6665      	str	r5, [r4, #100]	; 0x64
 8006194:	f000 f847 	bl	8006226 <__retarget_lock_init_recursive>
 8006198:	f7ff ff96 	bl	80060c8 <__sfp_lock_release>
 800619c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061a4:	6025      	str	r5, [r4, #0]
 80061a6:	61a5      	str	r5, [r4, #24]
 80061a8:	2208      	movs	r2, #8
 80061aa:	4629      	mov	r1, r5
 80061ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061b0:	f7fe ffe2 	bl	8005178 <memset>
 80061b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061bc:	4620      	mov	r0, r4
 80061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c0:	3468      	adds	r4, #104	; 0x68
 80061c2:	e7d9      	b.n	8006178 <__sfp+0x1c>
 80061c4:	2104      	movs	r1, #4
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff ff62 	bl	8006090 <__sfmoreglue>
 80061cc:	4604      	mov	r4, r0
 80061ce:	6030      	str	r0, [r6, #0]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1d5      	bne.n	8006180 <__sfp+0x24>
 80061d4:	f7ff ff78 	bl	80060c8 <__sfp_lock_release>
 80061d8:	230c      	movs	r3, #12
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	e7ee      	b.n	80061bc <__sfp+0x60>
 80061de:	bf00      	nop
 80061e0:	080066b4 	.word	0x080066b4
 80061e4:	ffff0001 	.word	0xffff0001

080061e8 <_fwalk_reent>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	4606      	mov	r6, r0
 80061ee:	4688      	mov	r8, r1
 80061f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061f4:	2700      	movs	r7, #0
 80061f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061fa:	f1b9 0901 	subs.w	r9, r9, #1
 80061fe:	d505      	bpl.n	800620c <_fwalk_reent+0x24>
 8006200:	6824      	ldr	r4, [r4, #0]
 8006202:	2c00      	cmp	r4, #0
 8006204:	d1f7      	bne.n	80061f6 <_fwalk_reent+0xe>
 8006206:	4638      	mov	r0, r7
 8006208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620c:	89ab      	ldrh	r3, [r5, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d907      	bls.n	8006222 <_fwalk_reent+0x3a>
 8006212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006216:	3301      	adds	r3, #1
 8006218:	d003      	beq.n	8006222 <_fwalk_reent+0x3a>
 800621a:	4629      	mov	r1, r5
 800621c:	4630      	mov	r0, r6
 800621e:	47c0      	blx	r8
 8006220:	4307      	orrs	r7, r0
 8006222:	3568      	adds	r5, #104	; 0x68
 8006224:	e7e9      	b.n	80061fa <_fwalk_reent+0x12>

08006226 <__retarget_lock_init_recursive>:
 8006226:	4770      	bx	lr

08006228 <__retarget_lock_acquire_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_release_recursive>:
 800622a:	4770      	bx	lr

0800622c <__swhatbuf_r>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	460e      	mov	r6, r1
 8006230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006234:	2900      	cmp	r1, #0
 8006236:	b096      	sub	sp, #88	; 0x58
 8006238:	4614      	mov	r4, r2
 800623a:	461d      	mov	r5, r3
 800623c:	da08      	bge.n	8006250 <__swhatbuf_r+0x24>
 800623e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	602a      	str	r2, [r5, #0]
 8006246:	061a      	lsls	r2, r3, #24
 8006248:	d410      	bmi.n	800626c <__swhatbuf_r+0x40>
 800624a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800624e:	e00e      	b.n	800626e <__swhatbuf_r+0x42>
 8006250:	466a      	mov	r2, sp
 8006252:	f000 f951 	bl	80064f8 <_fstat_r>
 8006256:	2800      	cmp	r0, #0
 8006258:	dbf1      	blt.n	800623e <__swhatbuf_r+0x12>
 800625a:	9a01      	ldr	r2, [sp, #4]
 800625c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006264:	425a      	negs	r2, r3
 8006266:	415a      	adcs	r2, r3
 8006268:	602a      	str	r2, [r5, #0]
 800626a:	e7ee      	b.n	800624a <__swhatbuf_r+0x1e>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	2000      	movs	r0, #0
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	b016      	add	sp, #88	; 0x58
 8006274:	bd70      	pop	{r4, r5, r6, pc}
	...

08006278 <__smakebuf_r>:
 8006278:	898b      	ldrh	r3, [r1, #12]
 800627a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800627c:	079d      	lsls	r5, r3, #30
 800627e:	4606      	mov	r6, r0
 8006280:	460c      	mov	r4, r1
 8006282:	d507      	bpl.n	8006294 <__smakebuf_r+0x1c>
 8006284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	2301      	movs	r3, #1
 800628e:	6163      	str	r3, [r4, #20]
 8006290:	b002      	add	sp, #8
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	ab01      	add	r3, sp, #4
 8006296:	466a      	mov	r2, sp
 8006298:	f7ff ffc8 	bl	800622c <__swhatbuf_r>
 800629c:	9900      	ldr	r1, [sp, #0]
 800629e:	4605      	mov	r5, r0
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7ff f873 	bl	800538c <_malloc_r>
 80062a6:	b948      	cbnz	r0, 80062bc <__smakebuf_r+0x44>
 80062a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ac:	059a      	lsls	r2, r3, #22
 80062ae:	d4ef      	bmi.n	8006290 <__smakebuf_r+0x18>
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	e7e3      	b.n	8006284 <__smakebuf_r+0xc>
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <__smakebuf_r+0x7c>)
 80062be:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	6020      	str	r0, [r4, #0]
 80062c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	6163      	str	r3, [r4, #20]
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	6120      	str	r0, [r4, #16]
 80062d2:	b15b      	cbz	r3, 80062ec <__smakebuf_r+0x74>
 80062d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d8:	4630      	mov	r0, r6
 80062da:	f000 f91f 	bl	800651c <_isatty_r>
 80062de:	b128      	cbz	r0, 80062ec <__smakebuf_r+0x74>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	89a0      	ldrh	r0, [r4, #12]
 80062ee:	4305      	orrs	r5, r0
 80062f0:	81a5      	strh	r5, [r4, #12]
 80062f2:	e7cd      	b.n	8006290 <__smakebuf_r+0x18>
 80062f4:	08006085 	.word	0x08006085

080062f8 <memmove>:
 80062f8:	4288      	cmp	r0, r1
 80062fa:	b510      	push	{r4, lr}
 80062fc:	eb01 0402 	add.w	r4, r1, r2
 8006300:	d902      	bls.n	8006308 <memmove+0x10>
 8006302:	4284      	cmp	r4, r0
 8006304:	4623      	mov	r3, r4
 8006306:	d807      	bhi.n	8006318 <memmove+0x20>
 8006308:	1e43      	subs	r3, r0, #1
 800630a:	42a1      	cmp	r1, r4
 800630c:	d008      	beq.n	8006320 <memmove+0x28>
 800630e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006316:	e7f8      	b.n	800630a <memmove+0x12>
 8006318:	4402      	add	r2, r0
 800631a:	4601      	mov	r1, r0
 800631c:	428a      	cmp	r2, r1
 800631e:	d100      	bne.n	8006322 <memmove+0x2a>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800632a:	e7f7      	b.n	800631c <memmove+0x24>

0800632c <__malloc_lock>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__malloc_lock+0x8>)
 800632e:	f7ff bf7b 	b.w	8006228 <__retarget_lock_acquire_recursive>
 8006332:	bf00      	nop
 8006334:	20012f60 	.word	0x20012f60

08006338 <__malloc_unlock>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__malloc_unlock+0x8>)
 800633a:	f7ff bf76 	b.w	800622a <__retarget_lock_release_recursive>
 800633e:	bf00      	nop
 8006340:	20012f60 	.word	0x20012f60

08006344 <_realloc_r>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	4680      	mov	r8, r0
 800634a:	4614      	mov	r4, r2
 800634c:	460e      	mov	r6, r1
 800634e:	b921      	cbnz	r1, 800635a <_realloc_r+0x16>
 8006350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	4611      	mov	r1, r2
 8006356:	f7ff b819 	b.w	800538c <_malloc_r>
 800635a:	b92a      	cbnz	r2, 8006368 <_realloc_r+0x24>
 800635c:	f7fe ffaa 	bl	80052b4 <_free_r>
 8006360:	4625      	mov	r5, r4
 8006362:	4628      	mov	r0, r5
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	f000 f8fa 	bl	8006560 <_malloc_usable_size_r>
 800636c:	4284      	cmp	r4, r0
 800636e:	4607      	mov	r7, r0
 8006370:	d802      	bhi.n	8006378 <_realloc_r+0x34>
 8006372:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006376:	d812      	bhi.n	800639e <_realloc_r+0x5a>
 8006378:	4621      	mov	r1, r4
 800637a:	4640      	mov	r0, r8
 800637c:	f7ff f806 	bl	800538c <_malloc_r>
 8006380:	4605      	mov	r5, r0
 8006382:	2800      	cmp	r0, #0
 8006384:	d0ed      	beq.n	8006362 <_realloc_r+0x1e>
 8006386:	42bc      	cmp	r4, r7
 8006388:	4622      	mov	r2, r4
 800638a:	4631      	mov	r1, r6
 800638c:	bf28      	it	cs
 800638e:	463a      	movcs	r2, r7
 8006390:	f7fe fee4 	bl	800515c <memcpy>
 8006394:	4631      	mov	r1, r6
 8006396:	4640      	mov	r0, r8
 8006398:	f7fe ff8c 	bl	80052b4 <_free_r>
 800639c:	e7e1      	b.n	8006362 <_realloc_r+0x1e>
 800639e:	4635      	mov	r5, r6
 80063a0:	e7df      	b.n	8006362 <_realloc_r+0x1e>

080063a2 <_raise_r>:
 80063a2:	291f      	cmp	r1, #31
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4604      	mov	r4, r0
 80063a8:	460d      	mov	r5, r1
 80063aa:	d904      	bls.n	80063b6 <_raise_r+0x14>
 80063ac:	2316      	movs	r3, #22
 80063ae:	6003      	str	r3, [r0, #0]
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	bd38      	pop	{r3, r4, r5, pc}
 80063b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80063b8:	b112      	cbz	r2, 80063c0 <_raise_r+0x1e>
 80063ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063be:	b94b      	cbnz	r3, 80063d4 <_raise_r+0x32>
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 f831 	bl	8006428 <_getpid_r>
 80063c6:	462a      	mov	r2, r5
 80063c8:	4601      	mov	r1, r0
 80063ca:	4620      	mov	r0, r4
 80063cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063d0:	f000 b818 	b.w	8006404 <_kill_r>
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d00a      	beq.n	80063ee <_raise_r+0x4c>
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	d103      	bne.n	80063e4 <_raise_r+0x42>
 80063dc:	2316      	movs	r3, #22
 80063de:	6003      	str	r3, [r0, #0]
 80063e0:	2001      	movs	r0, #1
 80063e2:	e7e7      	b.n	80063b4 <_raise_r+0x12>
 80063e4:	2400      	movs	r4, #0
 80063e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063ea:	4628      	mov	r0, r5
 80063ec:	4798      	blx	r3
 80063ee:	2000      	movs	r0, #0
 80063f0:	e7e0      	b.n	80063b4 <_raise_r+0x12>
	...

080063f4 <raise>:
 80063f4:	4b02      	ldr	r3, [pc, #8]	; (8006400 <raise+0xc>)
 80063f6:	4601      	mov	r1, r0
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f7ff bfd2 	b.w	80063a2 <_raise_r>
 80063fe:	bf00      	nop
 8006400:	20000014 	.word	0x20000014

08006404 <_kill_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d07      	ldr	r5, [pc, #28]	; (8006424 <_kill_r+0x20>)
 8006408:	2300      	movs	r3, #0
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	f7fa fd0d 	bl	8000e30 <_kill>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d102      	bne.n	8006420 <_kill_r+0x1c>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	b103      	cbz	r3, 8006420 <_kill_r+0x1c>
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	bd38      	pop	{r3, r4, r5, pc}
 8006422:	bf00      	nop
 8006424:	20012f64 	.word	0x20012f64

08006428 <_getpid_r>:
 8006428:	f7fa bcfa 	b.w	8000e20 <_getpid>

0800642c <__sread>:
 800642c:	b510      	push	{r4, lr}
 800642e:	460c      	mov	r4, r1
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	f000 f89c 	bl	8006570 <_read_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	bfab      	itete	ge
 800643c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800643e:	89a3      	ldrhlt	r3, [r4, #12]
 8006440:	181b      	addge	r3, r3, r0
 8006442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006446:	bfac      	ite	ge
 8006448:	6563      	strge	r3, [r4, #84]	; 0x54
 800644a:	81a3      	strhlt	r3, [r4, #12]
 800644c:	bd10      	pop	{r4, pc}

0800644e <__swrite>:
 800644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006452:	461f      	mov	r7, r3
 8006454:	898b      	ldrh	r3, [r1, #12]
 8006456:	05db      	lsls	r3, r3, #23
 8006458:	4605      	mov	r5, r0
 800645a:	460c      	mov	r4, r1
 800645c:	4616      	mov	r6, r2
 800645e:	d505      	bpl.n	800646c <__swrite+0x1e>
 8006460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006464:	2302      	movs	r3, #2
 8006466:	2200      	movs	r2, #0
 8006468:	f000 f868 	bl	800653c <_lseek_r>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	4632      	mov	r2, r6
 800647a:	463b      	mov	r3, r7
 800647c:	4628      	mov	r0, r5
 800647e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006482:	f000 b817 	b.w	80064b4 <_write_r>

08006486 <__sseek>:
 8006486:	b510      	push	{r4, lr}
 8006488:	460c      	mov	r4, r1
 800648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648e:	f000 f855 	bl	800653c <_lseek_r>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	bf15      	itete	ne
 8006498:	6560      	strne	r0, [r4, #84]	; 0x54
 800649a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800649e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064a2:	81a3      	strheq	r3, [r4, #12]
 80064a4:	bf18      	it	ne
 80064a6:	81a3      	strhne	r3, [r4, #12]
 80064a8:	bd10      	pop	{r4, pc}

080064aa <__sclose>:
 80064aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ae:	f000 b813 	b.w	80064d8 <_close_r>
	...

080064b4 <_write_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d07      	ldr	r5, [pc, #28]	; (80064d4 <_write_r+0x20>)
 80064b8:	4604      	mov	r4, r0
 80064ba:	4608      	mov	r0, r1
 80064bc:	4611      	mov	r1, r2
 80064be:	2200      	movs	r2, #0
 80064c0:	602a      	str	r2, [r5, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f7fa fceb 	bl	8000e9e <_write>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_write_r+0x1e>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_write_r+0x1e>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	20012f64 	.word	0x20012f64

080064d8 <_close_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d06      	ldr	r5, [pc, #24]	; (80064f4 <_close_r+0x1c>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fa fcf7 	bl	8000ed6 <_close>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_close_r+0x1a>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_close_r+0x1a>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	20012f64 	.word	0x20012f64

080064f8 <_fstat_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d07      	ldr	r5, [pc, #28]	; (8006518 <_fstat_r+0x20>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	f7fa fcf2 	bl	8000eee <_fstat>
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	d102      	bne.n	8006514 <_fstat_r+0x1c>
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	b103      	cbz	r3, 8006514 <_fstat_r+0x1c>
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	bd38      	pop	{r3, r4, r5, pc}
 8006516:	bf00      	nop
 8006518:	20012f64 	.word	0x20012f64

0800651c <_isatty_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d06      	ldr	r5, [pc, #24]	; (8006538 <_isatty_r+0x1c>)
 8006520:	2300      	movs	r3, #0
 8006522:	4604      	mov	r4, r0
 8006524:	4608      	mov	r0, r1
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	f7fa fcf1 	bl	8000f0e <_isatty>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_isatty_r+0x1a>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_isatty_r+0x1a>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	20012f64 	.word	0x20012f64

0800653c <_lseek_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d07      	ldr	r5, [pc, #28]	; (800655c <_lseek_r+0x20>)
 8006540:	4604      	mov	r4, r0
 8006542:	4608      	mov	r0, r1
 8006544:	4611      	mov	r1, r2
 8006546:	2200      	movs	r2, #0
 8006548:	602a      	str	r2, [r5, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	f7fa fcea 	bl	8000f24 <_lseek>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_lseek_r+0x1e>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_lseek_r+0x1e>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	20012f64 	.word	0x20012f64

08006560 <_malloc_usable_size_r>:
 8006560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006564:	1f18      	subs	r0, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfbc      	itt	lt
 800656a:	580b      	ldrlt	r3, [r1, r0]
 800656c:	18c0      	addlt	r0, r0, r3
 800656e:	4770      	bx	lr

08006570 <_read_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	; (8006590 <_read_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fa fc70 	bl	8000e64 <_read>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_read_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_read_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	20012f64 	.word	0x20012f64

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
